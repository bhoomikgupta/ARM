
USB_MINICOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006208  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  080063f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  200001a0  08006598  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20001cbc  08006598  00021cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127ce  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d27  00000000  00000000  0003299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000356c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  000361c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b5c  00000000  00000000  00036b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e67e  00000000  00000000  000596ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3790  00000000  00000000  00067d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b4fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b60  00000000  00000000  0012b550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001a0 	.word	0x200001a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006378 	.word	0x08006378

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001a4 	.word	0x200001a4
 80001c4:	08006378 	.word	0x08006378

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f940 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f810 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f876 	bl	80005cc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f005 fa04 	bl	80058ec <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(Buf,strlen((char*)Buf));
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <main+0x28>)
 80004e6:	f7ff fe6f 	bl	80001c8 <strlen>
 80004ea:	4603      	mov	r3, r0
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <main+0x28>)
 80004f2:	f005 fab9 	bl	8005a68 <CDC_Transmit_FS>
 80004f6:	e7f5      	b.n	80004e4 <main+0x14>
 80004f8:	20000000 	.word	0x20000000

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f005 ff2c 	bl	8006368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <SystemClock_Config+0xc8>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <SystemClock_Config+0xc8>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <SystemClock_Config+0xc8>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <SystemClock_Config+0xcc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a20      	ldr	r2, [pc, #128]	; (80005c8 <SystemClock_Config+0xcc>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <SystemClock_Config+0xcc>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	; 0xa8
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fdb1 	bl	80020e8 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800058c:	f000 f846 	bl	800061c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	230f      	movs	r3, #15
 8000592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000594:	2302      	movs	r3, #2
 8000596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2102      	movs	r1, #2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f813 	bl	80025d8 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005b8:	f000 f830 	bl	800061c <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	; 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_GPIO_Init+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <MX_GPIO_Init+0x4c>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <MX_GPIO_Init+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x4c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x4c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	e7fe      	b.n	8000624 <Error_Handler+0x8>
	...

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_MspInit+0x4c>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <HAL_MspInit+0x4c>)
 8000638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063c:	6453      	str	r3, [r2, #68]	; 0x44
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_MspInit+0x4c>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_MspInit+0x4c>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_MspInit+0x4c>)
 8000654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000658:	6413      	str	r3, [r2, #64]	; 0x40
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_MspInit+0x4c>)
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800067c:	e7fe      	b.n	800067c <NMI_Handler+0x4>

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler+0x4>

0800068a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <UsageFault_Handler+0x4>

08000696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f89a 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <OTG_FS_IRQHandler+0x10>)
 80006d2:	f000 fcd5 	bl	8001080 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200018b4 	.word	0x200018b4

080006e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800073c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800070a:	490e      	ldr	r1, [pc, #56]	; (8000744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800070c:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0b      	ldr	r2, [pc, #44]	; (800074c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000720:	4c0b      	ldr	r4, [pc, #44]	; (8000750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800072e:	f7ff ffd7 	bl	80006e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f005 fdf5 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000736:	f7ff fecb 	bl	80004d0 <main>
  bx  lr    
 800073a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800073c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000748:	080063f8 	.word	0x080063f8
  ldr r2, =_sbss
 800074c:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000750:	20001cbc 	.word	0x20001cbc

08000754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC_IRQHandler>
	...

08000758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_Init+0x40>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <HAL_Init+0x40>)
 8000762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <HAL_Init+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <HAL_Init+0x40>)
 800076e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x40>)
 800077a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800077e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f94f 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff ff4c 	bl	8000628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023c00 	.word	0x40023c00

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f967 	bl	8000a8e <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f92f 	bl	8000a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000020 	.word	0x20000020
 80007f4:	20000028 	.word	0x20000028
 80007f8:	20000024 	.word	0x20000024

080007fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_IncTick+0x20>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_IncTick+0x24>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_IncTick+0x24>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000028 	.word	0x20000028
 8000820:	200003e0 	.word	0x200003e0

08000824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <HAL_GetTick+0x14>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200003e0 	.word	0x200003e0

0800083c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000844:	f7ff ffee 	bl	8000824 <HAL_GetTick>
 8000848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000854:	d005      	beq.n	8000862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Delay+0x44>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	461a      	mov	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	4413      	add	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000862:	bf00      	nop
 8000864:	f7ff ffde 	bl	8000824 <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	429a      	cmp	r2, r3
 8000872:	d8f7      	bhi.n	8000864 <HAL_Delay+0x28>
  {
  }
}
 8000874:	bf00      	nop
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000028 	.word	0x20000028

08000884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a0:	4013      	ands	r3, r2
 80008a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <__NVIC_SetPriorityGrouping+0x44>)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	60d3      	str	r3, [r2, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <__NVIC_GetPriorityGrouping+0x18>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	0a1b      	lsrs	r3, r3, #8
 80008d6:	f003 0307 	and.w	r3, r3, #7
}
 80008da:	4618      	mov	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	db0b      	blt.n	8000912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	f003 021f 	and.w	r2, r3, #31
 8000900:	4907      	ldr	r1, [pc, #28]	; (8000920 <__NVIC_EnableIRQ+0x38>)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	095b      	lsrs	r3, r3, #5
 8000908:	2001      	movs	r0, #1
 800090a:	fa00 f202 	lsl.w	r2, r0, r2
 800090e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000e100 	.word	0xe000e100

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff29 	bl	8000884 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff3e 	bl	80008cc <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff8e 	bl	8000978 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff31 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ffa2 	bl	80009e0 <SysTick_Config>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e16b      	b.n	8000d9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f040 815a 	bne.w	8000d96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f003 0303 	and.w	r3, r3, #3
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d005      	beq.n	8000afa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d130      	bne.n	8000b5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68da      	ldr	r2, [r3, #12]
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b30:	2201      	movs	r2, #1
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	f003 0201 	and.w	r2, r3, #1
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	69ba      	ldr	r2, [r7, #24]
 8000b5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d017      	beq.n	8000b98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d123      	bne.n	8000bec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	08da      	lsrs	r2, r3, #3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3208      	adds	r2, #8
 8000bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	691a      	ldr	r2, [r3, #16]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	08da      	lsrs	r2, r3, #3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3208      	adds	r2, #8
 8000be6:	69b9      	ldr	r1, [r7, #24]
 8000be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4013      	ands	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0203 	and.w	r2, r3, #3
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 80b4 	beq.w	8000d96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <HAL_GPIO_Init+0x30c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a5f      	ldr	r2, [pc, #380]	; (8000db4 <HAL_GPIO_Init+0x30c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b5d      	ldr	r3, [pc, #372]	; (8000db4 <HAL_GPIO_Init+0x30c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c4a:	4a5b      	ldr	r2, [pc, #364]	; (8000db8 <HAL_GPIO_Init+0x310>)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a52      	ldr	r2, [pc, #328]	; (8000dbc <HAL_GPIO_Init+0x314>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d02b      	beq.n	8000cce <HAL_GPIO_Init+0x226>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <HAL_GPIO_Init+0x318>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d025      	beq.n	8000cca <HAL_GPIO_Init+0x222>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a50      	ldr	r2, [pc, #320]	; (8000dc4 <HAL_GPIO_Init+0x31c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d01f      	beq.n	8000cc6 <HAL_GPIO_Init+0x21e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4f      	ldr	r2, [pc, #316]	; (8000dc8 <HAL_GPIO_Init+0x320>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d019      	beq.n	8000cc2 <HAL_GPIO_Init+0x21a>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4e      	ldr	r2, [pc, #312]	; (8000dcc <HAL_GPIO_Init+0x324>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d013      	beq.n	8000cbe <HAL_GPIO_Init+0x216>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a4d      	ldr	r2, [pc, #308]	; (8000dd0 <HAL_GPIO_Init+0x328>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d00d      	beq.n	8000cba <HAL_GPIO_Init+0x212>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a4c      	ldr	r2, [pc, #304]	; (8000dd4 <HAL_GPIO_Init+0x32c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x20e>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <HAL_GPIO_Init+0x330>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_GPIO_Init+0x20a>
 8000cae:	2307      	movs	r3, #7
 8000cb0:	e00e      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	e00c      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e00a      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cba:	2305      	movs	r3, #5
 8000cbc:	e008      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e006      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e004      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e002      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <HAL_GPIO_Init+0x228>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	f002 0203 	and.w	r2, r2, #3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4093      	lsls	r3, r2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ce0:	4935      	ldr	r1, [pc, #212]	; (8000db8 <HAL_GPIO_Init+0x310>)
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cee:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d66:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_GPIO_Init+0x334>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	2b0f      	cmp	r3, #15
 8000da0:	f67f ae90 	bls.w	8000ac4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40020c00 	.word	0x40020c00
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40021400 	.word	0x40021400
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40021c00 	.word	0x40021c00
 8000ddc:	40013c00 	.word	0x40013c00

08000de0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	b08f      	sub	sp, #60	; 0x3c
 8000de4:	af0a      	add	r7, sp, #40	; 0x28
 8000de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e10f      	b.n	8001012 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d106      	bne.n	8000e12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f004 ff73 	bl	8005cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2203      	movs	r2, #3
 8000e16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 feba 	bl	8002baa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	687e      	ldr	r6, [r7, #4]
 8000e3e:	466d      	mov	r5, sp
 8000e40:	f106 0410 	add.w	r4, r6, #16
 8000e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e54:	1d33      	adds	r3, r6, #4
 8000e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e58:	6838      	ldr	r0, [r7, #0]
 8000e5a:	f001 fd91 	bl	8002980 <USB_CoreInit>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2202      	movs	r2, #2
 8000e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e0d0      	b.n	8001012 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fea8 	bl	8002bcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e04a      	b.n	8000f18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	440b      	add	r3, r1
 8000e90:	333d      	adds	r3, #61	; 0x3d
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	1a9b      	subs	r3, r3, r2
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	333c      	adds	r3, #60	; 0x3c
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	b298      	uxth	r0, r3
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3342      	adds	r3, #66	; 0x42
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ec2:	7bfa      	ldrb	r2, [r7, #15]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	333f      	adds	r3, #63	; 0x3f
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3344      	adds	r3, #68	; 0x44
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3348      	adds	r3, #72	; 0x48
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3350      	adds	r3, #80	; 0x50
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	3301      	adds	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d3af      	bcc.n	8000e82 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e044      	b.n	8000fb2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	1a9b      	subs	r3, r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	440b      	add	r3, r1
 8000f36:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f54:	7bfa      	ldrb	r2, [r7, #15]
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	1a9b      	subs	r3, r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	440b      	add	r3, r1
 8000f62:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4613      	mov	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3b5      	bcc.n	8000f28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	687e      	ldr	r6, [r7, #4]
 8000fc4:	466d      	mov	r5, sp
 8000fc6:	f106 0410 	add.w	r4, r6, #16
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fda:	1d33      	adds	r3, r6, #4
 8000fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f001 fe1e 	bl	8002c20 <USB_DevInit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2202      	movs	r2, #2
 8000fee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00d      	b.n	8001012 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f002 fe66 	bl	8003cdc <USB_DevDisconnect>

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800101a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_PCD_Start+0x1c>
 8001032:	2302      	movs	r3, #2
 8001034:	e020      	b.n	8001078 <HAL_PCD_Start+0x5e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	2b01      	cmp	r3, #1
 8001044:	d109      	bne.n	800105a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001052:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fd92 	bl	8002b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fe16 	bl	8003c9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08d      	sub	sp, #52	; 0x34
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fed4 	bl	8003e44 <USB_GetMode>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 839d 	bne.w	80017de <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fe38 	bl	8003d1e <USB_ReadInterrupts>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 8393 	beq.w	80017dc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fe2f 	bl	8003d1e <USB_ReadInterrupts>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d107      	bne.n	80010da <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f002 0202 	and.w	r2, r2, #2
 80010d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fe1d 	bl	8003d1e <USB_ReadInterrupts>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b10      	cmp	r3, #16
 80010ec:	d161      	bne.n	80011b2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f022 0210 	bic.w	r2, r2, #16
 80010fc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	f003 020f 	and.w	r2, r3, #15
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	3304      	adds	r3, #4
 800111c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	0c5b      	lsrs	r3, r3, #17
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	2b02      	cmp	r3, #2
 8001128:	d124      	bne.n	8001174 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d035      	beq.n	80011a2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001144:	b29b      	uxth	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f002 fc83 	bl	8003a54 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115a:	441a      	add	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	699a      	ldr	r2, [r3, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	091b      	lsrs	r3, r3, #4
 8001168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800116c:	441a      	add	r2, r3
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	619a      	str	r2, [r3, #24]
 8001172:	e016      	b.n	80011a2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	0c5b      	lsrs	r3, r3, #17
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	2b06      	cmp	r3, #6
 800117e:	d110      	bne.n	80011a2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001186:	2208      	movs	r2, #8
 8001188:	4619      	mov	r1, r3
 800118a:	6a38      	ldr	r0, [r7, #32]
 800118c:	f002 fc62 	bl	8003a54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800119c:	441a      	add	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0210 	orr.w	r2, r2, #16
 80011b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 fdb1 	bl	8003d1e <USB_ReadInterrupts>
 80011bc:	4603      	mov	r3, r0
 80011be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011c6:	d16e      	bne.n	80012a6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fdb7 	bl	8003d44 <USB_ReadDevAllOutEpInterrupt>
 80011d6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011d8:	e062      	b.n	80012a0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d057      	beq.n	8001294 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fddc 	bl	8003dac <USB_ReadDevOutEPInterrupt>
 80011f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001202:	015a      	lsls	r2, r3, #5
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	4413      	add	r3, r2
 8001208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800120c:	461a      	mov	r2, r3
 800120e:	2301      	movs	r3, #1
 8001210:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001212:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 fdb1 	bl	8001d7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00c      	beq.n	800123e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	4413      	add	r3, r2
 800122c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001230:	461a      	mov	r2, r3
 8001232:	2308      	movs	r3, #8
 8001234:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 feab 	bl	8001f94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	015a      	lsls	r2, r3, #5
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001254:	461a      	mov	r2, r3
 8001256:	2310      	movs	r3, #16
 8001258:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0320 	and.w	r3, r3, #32
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	015a      	lsls	r2, r3, #5
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	4413      	add	r3, r2
 800126c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001270:	461a      	mov	r2, r3
 8001272:	2320      	movs	r3, #32
 8001274:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	015a      	lsls	r2, r3, #5
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	4413      	add	r3, r2
 8001288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800128c:	461a      	mov	r2, r3
 800128e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001292:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	3301      	adds	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d199      	bne.n	80011da <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fd37 	bl	8003d1e <USB_ReadInterrupts>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80012ba:	f040 80c0 	bne.w	800143e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fd58 	bl	8003d78 <USB_ReadDevAllInEpInterrupt>
 80012c8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012ce:	e0b2      	b.n	8001436 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80a7 	beq.w	800142a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fd7e 	bl	8003de8 <USB_ReadDevInEPInterrupt>
 80012ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d057      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	2201      	movs	r2, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800130c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	69f9      	ldr	r1, [r7, #28]
 8001314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001318:	4013      	ands	r3, r2
 800131a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	015a      	lsls	r2, r3, #5
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	4413      	add	r3, r2
 8001324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001328:	461a      	mov	r2, r3
 800132a:	2301      	movs	r3, #1
 800132c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d132      	bne.n	800139c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	3348      	adds	r3, #72	; 0x48
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4403      	add	r3, r0
 8001356:	3344      	adds	r3, #68	; 0x44
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4419      	add	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001360:	4613      	mov	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	1a9b      	subs	r3, r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4403      	add	r3, r0
 800136a:	3348      	adds	r3, #72	; 0x48
 800136c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	2b00      	cmp	r3, #0
 8001372:	d113      	bne.n	800139c <HAL_PCD_IRQHandler+0x31c>
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3350      	adds	r3, #80	; 0x50
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d108      	bne.n	800139c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001394:	461a      	mov	r2, r3
 8001396:	2101      	movs	r1, #1
 8001398:	f002 fd86 	bl	8003ea8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f004 fd29 	bl	8005dfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013be:	461a      	mov	r2, r3
 80013c0:	2308      	movs	r3, #8
 80013c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013da:	461a      	mov	r2, r3
 80013dc:	2310      	movs	r3, #16
 80013de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	015a      	lsls	r2, r3, #5
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	4413      	add	r3, r2
 80013f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013f6:	461a      	mov	r2, r3
 80013f8:	2340      	movs	r3, #64	; 0x40
 80013fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d008      	beq.n	8001418 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	015a      	lsls	r2, r3, #5
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	4413      	add	r3, r2
 800140e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001412:	461a      	mov	r2, r3
 8001414:	2302      	movs	r3, #2
 8001416:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fc1b 	bl	8001c60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	085b      	lsrs	r3, r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f af49 	bne.w	80012d0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fc6b 	bl	8003d1e <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800144e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001452:	d122      	bne.n	800149a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fe27 	bl	80020d0 <HAL_PCDEx_LPM_Callback>
 8001482:	e002      	b.n	800148a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f004 fd2f 	bl	8005ee8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f002 fc3d 	bl	8003d1e <USB_ReadInterrupts>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014ae:	d112      	bne.n	80014d6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f004 fceb 	bl	8005e9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fc1f 	bl	8003d1e <USB_ReadInterrupts>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ea:	f040 80c7 	bne.w	800167c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2110      	movs	r1, #16
 8001508:	4618      	mov	r0, r3
 800150a:	f001 fced 	bl	8002ee8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001512:	e056      	b.n	80015c2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	015a      	lsls	r2, r3, #5
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	4413      	add	r3, r2
 800151c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001520:	461a      	mov	r2, r3
 8001522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001526:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001538:	0151      	lsls	r1, r2, #5
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	440a      	add	r2, r1
 800153e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001546:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001558:	0151      	lsls	r1, r2, #5
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	440a      	add	r2, r1
 800155e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001562:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001566:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800157a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800158c:	0151      	lsls	r1, r2, #5
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	440a      	add	r2, r1
 8001592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800159a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ac:	0151      	lsls	r1, r2, #5
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	440a      	add	r2, r1
 80015b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	3301      	adds	r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3a3      	bcc.n	8001514 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015da:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d016      	beq.n	8001616 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f8:	f043 030b 	orr.w	r3, r3, #11
 80015fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800160e:	f043 030b 	orr.w	r3, r3, #11
 8001612:	6453      	str	r3, [r2, #68]	; 0x44
 8001614:	e015      	b.n	8001642 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001624:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001628:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800162c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800163c:	f043 030b 	orr.w	r3, r3, #11
 8001640:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001650:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001654:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001666:	461a      	mov	r2, r3
 8001668:	f002 fc1e 	bl	8003ea8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800167a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f002 fb4c 	bl	8003d1e <USB_ReadInterrupts>
 8001686:	4603      	mov	r3, r0
 8001688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001690:	d124      	bne.n	80016dc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f002 fbe2 	bl	8003e60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 fc82 	bl	8002faa <USB_GetDevSpeed>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681c      	ldr	r4, [r3, #0]
 80016b2:	f001 f959 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 80016b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4620      	mov	r0, r4
 80016c2:	f001 f9bf 	bl	8002a44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f004 fbbf 	bl	8005e4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 fb1c 	bl	8003d1e <USB_ReadInterrupts>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d10a      	bne.n	8001706 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f004 fb9c 	bl	8005e2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f002 0208 	and.w	r2, r2, #8
 8001704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fb07 	bl	8003d1e <USB_ReadInterrupts>
 8001710:	4603      	mov	r3, r0
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800171a:	d10f      	bne.n	800173c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f004 fbfe 	bl	8005f28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800173a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f002 faec 	bl	8003d1e <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001750:	d10f      	bne.n	8001772 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4619      	mov	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f004 fbd1 	bl	8005f04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001770:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fad1 	bl	8003d1e <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d10a      	bne.n	800179e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f004 fbdf 	bl	8005f4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695a      	ldr	r2, [r3, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800179c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fabb 	bl	8003d1e <USB_ReadInterrupts>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d115      	bne.n	80017de <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f004 fbcf 	bl	8005f68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	e000      	b.n	80017de <HAL_PCD_IRQHandler+0x75e>
      return;
 80017dc:	bf00      	nop
    }
  }
}
 80017de:	3734      	adds	r7, #52	; 0x34
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd90      	pop	{r4, r7, pc}

080017e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_PCD_SetAddress+0x1a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e013      	b.n	8001826 <HAL_PCD_SetAddress+0x42>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fa19 	bl	8003c4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	4608      	mov	r0, r1
 8001838:	4611      	mov	r1, r2
 800183a:	461a      	mov	r2, r3
 800183c:	4603      	mov	r3, r0
 800183e:	70fb      	strb	r3, [r7, #3]
 8001840:	460b      	mov	r3, r1
 8001842:	803b      	strh	r3, [r7, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800184c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da0f      	bge.n	8001874 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	f003 020f 	and.w	r2, r3, #15
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	3338      	adds	r3, #56	; 0x38
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	3304      	adds	r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	705a      	strb	r2, [r3, #1]
 8001872:	e00f      	b.n	8001894 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	f003 020f 	and.w	r2, r3, #15
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	3304      	adds	r3, #4
 800188c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	b2da      	uxtb	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018a0:	883a      	ldrh	r2, [r7, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	78ba      	ldrb	r2, [r7, #2]
 80018aa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018be:	78bb      	ldrb	r3, [r7, #2]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d102      	bne.n	80018ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_PCD_EP_Open+0xaa>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e00e      	b.n	80018f6 <HAL_PCD_EP_Open+0xc8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fb84 	bl	8002ff4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80018f4:	7afb      	ldrb	r3, [r7, #11]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800190a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	da0f      	bge.n	8001932 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	f003 020f 	and.w	r2, r3, #15
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	3338      	adds	r3, #56	; 0x38
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	3304      	adds	r3, #4
 8001928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	705a      	strb	r2, [r3, #1]
 8001930:	e00f      	b.n	8001952 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 020f 	and.w	r2, r3, #15
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	3304      	adds	r3, #4
 800194a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_PCD_EP_Close+0x6e>
 8001968:	2302      	movs	r3, #2
 800196a:	e00e      	b.n	800198a <HAL_PCD_EP_Close+0x8c>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fbc2 	bl	8003104 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	460b      	mov	r3, r1
 80019a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a2:	7afb      	ldrb	r3, [r7, #11]
 80019a4:	f003 020f 	and.w	r2, r3, #15
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	3304      	adds	r3, #4
 80019ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2200      	movs	r2, #0
 80019d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d109      	bne.n	8001a0c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	6979      	ldr	r1, [r7, #20]
 8001a06:	f001 fe9d 	bl	8003744 <USB_EP0StartXfer>
 8001a0a:	e008      	b.n	8001a1e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	f001 fc4f 	bl	80032bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 020f 	and.w	r2, r3, #15
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	460b      	mov	r3, r1
 8001a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	f003 020f 	and.w	r2, r3, #15
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	3338      	adds	r3, #56	; 0x38
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d102      	bne.n	8001ab2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6979      	ldr	r1, [r7, #20]
 8001aca:	f001 fe3b 	bl	8003744 <USB_EP0StartXfer>
 8001ace:	e008      	b.n	8001ae2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	f001 fbed 	bl	80032bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 020f 	and.w	r2, r3, #15
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d901      	bls.n	8001b0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e050      	b.n	8001bac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0f      	bge.n	8001b32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1a9b      	subs	r3, r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3338      	adds	r3, #56	; 0x38
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	705a      	strb	r2, [r3, #1]
 8001b30:	e00d      	b.n	8001b4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	4413      	add	r3, r2
 8001b44:	3304      	adds	r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_PCD_EP_SetStall+0x82>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e01e      	b.n	8001bac <HAL_PCD_EP_SetStall+0xc0>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68f9      	ldr	r1, [r7, #12]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 ff92 	bl	8003aa6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	b2d9      	uxtb	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f002 f983 	bl	8003ea8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d901      	bls.n	8001bd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e042      	b.n	8001c58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	da0f      	bge.n	8001bfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 020f 	and.w	r2, r3, #15
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	3338      	adds	r3, #56	; 0x38
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	3304      	adds	r3, #4
 8001bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	705a      	strb	r2, [r3, #1]
 8001bf8:	e00f      	b.n	8001c1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3304      	adds	r3, #4
 8001c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_PCD_EP_ClrStall+0x86>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e00e      	b.n	8001c58 <HAL_PCD_EP_ClrStall+0xa4>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68f9      	ldr	r1, [r7, #12]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 ff9a 	bl	8003b82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3338      	adds	r3, #56	; 0x38
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	3304      	adds	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d901      	bls.n	8001c98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e06c      	b.n	8001d72 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d902      	bls.n	8001cb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cbc:	e02b      	b.n	8001d16 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	695a      	ldr	r2, [r3, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d902      	bls.n	8001cda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3303      	adds	r3, #3
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68d9      	ldr	r1, [r3, #12]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6978      	ldr	r0, [r7, #20]
 8001cfa:	f001 fe76 	bl	80039ea <USB_WritePacket>

    ep->xfer_buff  += len;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	441a      	add	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	441a      	add	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	015a      	lsls	r2, r3, #5
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d809      	bhi.n	8001d40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d203      	bcs.n	8001d40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1be      	bne.n	8001cbe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d811      	bhi.n	8001d70 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	2201      	movs	r2, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	6939      	ldr	r1, [r7, #16]
 8001d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	333c      	adds	r3, #60	; 0x3c
 8001d94:	3304      	adds	r3, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f040 80a0 	bne.w	8001ef4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d015      	beq.n	8001dea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a72      	ldr	r2, [pc, #456]	; (8001f8c <PCD_EP_OutXfrComplete_int+0x210>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f240 80dd 	bls.w	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80d7 	beq.w	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de0:	461a      	mov	r2, r3
 8001de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de6:	6093      	str	r3, [r2, #8]
 8001de8:	e0cb      	b.n	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d009      	beq.n	8001e08 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e00:	461a      	mov	r2, r3
 8001e02:	2320      	movs	r3, #32
 8001e04:	6093      	str	r3, [r2, #8]
 8001e06:	e0bc      	b.n	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 80b7 	bne.w	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4a5d      	ldr	r2, [pc, #372]	; (8001f8c <PCD_EP_OutXfrComplete_int+0x210>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d90f      	bls.n	8001e3c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e32:	461a      	mov	r2, r3
 8001e34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e38:	6093      	str	r3, [r2, #8]
 8001e3a:	e0a2      	b.n	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e4e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	0159      	lsls	r1, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	440b      	add	r3, r1
 8001e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e62:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4403      	add	r3, r0
 8001e72:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e76:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e8a:	6819      	ldr	r1, [r3, #0]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4403      	add	r3, r0
 8001e9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4419      	add	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4403      	add	r3, r0
 8001eb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d114      	bne.n	8001ee6 <PCD_EP_OutXfrComplete_int+0x16a>
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d108      	bne.n	8001ee6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	f001 ffe1 	bl	8003ea8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4619      	mov	r1, r3
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f003 ff69 	bl	8005dc4 <HAL_PCD_DataOutStageCallback>
 8001ef2:	e046      	b.n	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <PCD_EP_OutXfrComplete_int+0x214>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d124      	bne.n	8001f46 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	461a      	mov	r2, r3
 8001f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f18:	6093      	str	r3, [r2, #8]
 8001f1a:	e032      	b.n	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0320 	and.w	r3, r3, #32
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	2320      	movs	r3, #32
 8001f36:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f003 ff40 	bl	8005dc4 <HAL_PCD_DataOutStageCallback>
 8001f44:	e01d      	b.n	8001f82 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d114      	bne.n	8001f76 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d108      	bne.n	8001f76 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2100      	movs	r1, #0
 8001f72:	f001 ff99 	bl	8003ea8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f003 ff21 	bl	8005dc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	4f54300a 	.word	0x4f54300a
 8001f90:	4f54310a 	.word	0x4f54310a

08001f94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	333c      	adds	r3, #60	; 0x3c
 8001fac:	3304      	adds	r3, #4
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a15      	ldr	r2, [pc, #84]	; (800201c <PCD_EP_OutSetupPacket_int+0x88>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d90e      	bls.n	8001fe8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fe6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f003 fed9 	bl	8005da0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <PCD_EP_OutSetupPacket_int+0x88>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d90c      	bls.n	8002010 <PCD_EP_OutSetupPacket_int+0x7c>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d108      	bne.n	8002010 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002008:	461a      	mov	r2, r3
 800200a:	2101      	movs	r1, #1
 800200c:	f001 ff4c 	bl	8003ea8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	4f54300a 	.word	0x4f54300a

08002020 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
 800202c:	4613      	mov	r3, r2
 800202e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800203e:	883b      	ldrh	r3, [r7, #0]
 8002040:	0419      	lsls	r1, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	430a      	orrs	r2, r1
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
 800204c:	e028      	b.n	80020a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e00d      	b.n	800207e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	3340      	adds	r3, #64	; 0x40
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3301      	adds	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	3b01      	subs	r3, #1
 8002084:	429a      	cmp	r2, r3
 8002086:	d3ec      	bcc.n	8002062 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002088:	883b      	ldrh	r3, [r7, #0]
 800208a:	0418      	lsls	r0, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	3b01      	subs	r3, #1
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	4302      	orrs	r2, r0
 8002098:	3340      	adds	r3, #64	; 0x40
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e264      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d075      	beq.n	80021f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	4ba3      	ldr	r3, [pc, #652]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4ba0      	ldr	r3, [pc, #640]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b9d      	ldr	r3, [pc, #628]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b99      	ldr	r3, [pc, #612]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d157      	bne.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e23f      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x74>
 800214e:	4b91      	ldr	r3, [pc, #580]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a90      	ldr	r2, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b88      	ldr	r3, [pc, #544]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a87      	ldr	r2, [pc, #540]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a83      	ldr	r2, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a80      	ldr	r2, [pc, #512]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe fb40 	bl	8000824 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe fb3c 	bl	8000824 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e204      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fb2c 	bl	8000824 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe fb28 	bl	8000824 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1f0      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fe:	4b65      	ldr	r3, [pc, #404]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b62      	ldr	r3, [pc, #392]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b5f      	ldr	r3, [pc, #380]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1c4      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4952      	ldr	r1, [pc, #328]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCC_OscConfig+0x2b0>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fae1 	bl	8000824 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002266:	f7fe fadd 	bl	8000824 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1a5      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b46      	ldr	r3, [pc, #280]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4940      	ldr	r1, [pc, #256]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b3f      	ldr	r3, [pc, #252]	; (8002398 <HAL_RCC_OscConfig+0x2b0>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe fac0 	bl	8000824 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe fabc 	bl	8000824 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e184      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d030      	beq.n	8002334 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b30      	ldr	r3, [pc, #192]	; (800239c <HAL_RCC_OscConfig+0x2b4>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe faa0 	bl	8000824 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fa9c 	bl	8000824 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e164      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x200>
 8002306:	e015      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_RCC_OscConfig+0x2b4>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fa89 	bl	8000824 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002316:	f7fe fa85 	bl	8000824 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e14d      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a0 	beq.w	8002482 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0e      	ldr	r2, [pc, #56]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236e:	2301      	movs	r3, #1
 8002370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	2b00      	cmp	r3, #0
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <HAL_RCC_OscConfig+0x2b8>)
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238a:	f7fe fa4b 	bl	8000824 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	e011      	b.n	80023b6 <HAL_RCC_OscConfig+0x2ce>
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	42470000 	.word	0x42470000
 800239c:	42470e80 	.word	0x42470e80
 80023a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a4:	f7fe fa3e 	bl	8000824 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e106      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_RCC_OscConfig+0x4e4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
 80023ca:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a80      	ldr	r2, [pc, #512]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x32a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x312>
 80023e0:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6713      	str	r3, [r2, #112]	; 0x70
 80023ec:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a77      	ldr	r2, [pc, #476]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x32a>
 80023fa:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a74      	ldr	r2, [pc, #464]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240a:	4a71      	ldr	r2, [pc, #452]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241a:	f7fe fa03 	bl	8000824 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe f9ff 	bl	8000824 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0c5      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x33a>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe f9ed 	bl	8000824 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7fe f9e9 	bl	8000824 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0af      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 809b 	beq.w	80025c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d05c      	beq.n	8002552 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d141      	bne.n	8002524 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe f9bd 	bl	8000824 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe f9b9 	bl	8000824 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e081      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69da      	ldr	r2, [r3, #28]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	019b      	lsls	r3, r3, #6
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	4937      	ldr	r1, [pc, #220]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f6:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fc:	f7fe f992 	bl	8000824 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe f98e 	bl	8000824 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e056      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x41c>
 8002522:	e04e      	b.n	80025c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe f97b 	bl	8000824 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe f977 	bl	8000824 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e03f      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x44a>
 8002550:	e037      	b.n	80025c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e032      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_RCC_OscConfig+0x4e8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d028      	beq.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d121      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d11a      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002594:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002596:	4293      	cmp	r3, r2
 8002598:	d111      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	3b01      	subs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40007000 	.word	0x40007000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	42470060 	.word	0x42470060

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cc      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b68      	ldr	r3, [pc, #416]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d90c      	bls.n	8002614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800264e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d044      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d119      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	2b03      	cmp	r3, #3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e067      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4934      	ldr	r1, [pc, #208]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe f8ac 	bl	8000824 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe f8a8 	bl	8000824 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e04f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d20c      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe f80c 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00
 8002794:	40023800 	.word	0x40023800
 8002798:	080063d8 	.word	0x080063d8
 800279c:	20000020 	.word	0x20000020
 80027a0:	20000024 	.word	0x20000024

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	2300      	movs	r3, #0
 80027b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027bc:	4b67      	ldr	r3, [pc, #412]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	f200 80bd 	bhi.w	8002948 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x3a>
 80027d6:	e0b7      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027da:	60bb      	str	r3, [r7, #8]
       break;
 80027dc:	e0b7      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027e0:	60bb      	str	r3, [r7, #8]
      break;
 80027e2:	e0b4      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ee:	4b5b      	ldr	r3, [pc, #364]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04d      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	461a      	mov	r2, r3
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	ea02 0800 	and.w	r8, r2, r0
 8002812:	ea03 0901 	and.w	r9, r3, r1
 8002816:	4640      	mov	r0, r8
 8002818:	4649      	mov	r1, r9
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	014b      	lsls	r3, r1, #5
 8002824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002828:	0142      	lsls	r2, r0, #5
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	ebb0 0008 	subs.w	r0, r0, r8
 8002832:	eb61 0109 	sbc.w	r1, r1, r9
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002844:	0182      	lsls	r2, r0, #6
 8002846:	1a12      	subs	r2, r2, r0
 8002848:	eb63 0301 	sbc.w	r3, r3, r1
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	00d9      	lsls	r1, r3, #3
 8002856:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800285a:	00d0      	lsls	r0, r2, #3
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	eb12 0208 	adds.w	r2, r2, r8
 8002864:	eb43 0309 	adc.w	r3, r3, r9
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	0259      	lsls	r1, r3, #9
 8002872:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002876:	0250      	lsls	r0, r2, #9
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	461a      	mov	r2, r3
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	f7fd fca6 	bl	80001d8 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e04a      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	461a      	mov	r2, r3
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	ea02 0400 	and.w	r4, r2, r0
 80028ae:	ea03 0501 	and.w	r5, r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	014b      	lsls	r3, r1, #5
 80028c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028c4:	0142      	lsls	r2, r0, #5
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	1b00      	subs	r0, r0, r4
 80028cc:	eb61 0105 	sbc.w	r1, r1, r5
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	018b      	lsls	r3, r1, #6
 80028da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028de:	0182      	lsls	r2, r0, #6
 80028e0:	1a12      	subs	r2, r2, r0
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	f04f 0000 	mov.w	r0, #0
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	00d9      	lsls	r1, r3, #3
 80028f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f4:	00d0      	lsls	r0, r2, #3
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	1912      	adds	r2, r2, r4
 80028fc:	eb45 0303 	adc.w	r3, r5, r3
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0299      	lsls	r1, r3, #10
 800290a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800290e:	0290      	lsls	r0, r2, #10
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	f7fd fc5a 	bl	80001d8 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	60bb      	str	r3, [r7, #8]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800294a:	60bb      	str	r3, [r7, #8]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	68bb      	ldr	r3, [r7, #8]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	00f42400 	.word	0x00f42400
 8002964:	007a1200 	.word	0x007a1200

08002968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_GetHCLKFreq+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20000020 	.word	0x20000020

08002980 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002980:	b084      	sub	sp, #16
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	f107 001c 	add.w	r0, r7, #28
 800298e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2b01      	cmp	r3, #1
 8002996:	d122      	bne.n	80029de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f001 fac6 	bl	8003f64 <USB_CoreReset>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	e01a      	b.n	8002a14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 faba 	bl	8003f64 <USB_CoreReset>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80029f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	639a      	str	r2, [r3, #56]	; 0x38
 8002a06:	e005      	b.n	8002a14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10b      	bne.n	8002a32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f043 0206 	orr.w	r2, r3, #6
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a3e:	b004      	add	sp, #16
 8002a40:	4770      	bx	lr
	...

08002a44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d165      	bne.n	8002b24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4a41      	ldr	r2, [pc, #260]	; (8002b60 <USB_SetTurnaroundTime+0x11c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d906      	bls.n	8002a6e <USB_SetTurnaroundTime+0x2a>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a40      	ldr	r2, [pc, #256]	; (8002b64 <USB_SetTurnaroundTime+0x120>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d202      	bcs.n	8002a6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a68:	230f      	movs	r3, #15
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e062      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4a3c      	ldr	r2, [pc, #240]	; (8002b64 <USB_SetTurnaroundTime+0x120>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d306      	bcc.n	8002a84 <USB_SetTurnaroundTime+0x40>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a3b      	ldr	r2, [pc, #236]	; (8002b68 <USB_SetTurnaroundTime+0x124>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d202      	bcs.n	8002a84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002a7e:	230e      	movs	r3, #14
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e057      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4a38      	ldr	r2, [pc, #224]	; (8002b68 <USB_SetTurnaroundTime+0x124>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d306      	bcc.n	8002a9a <USB_SetTurnaroundTime+0x56>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <USB_SetTurnaroundTime+0x128>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d202      	bcs.n	8002a9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002a94:	230d      	movs	r3, #13
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e04c      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <USB_SetTurnaroundTime+0x128>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d306      	bcc.n	8002ab0 <USB_SetTurnaroundTime+0x6c>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	4a32      	ldr	r2, [pc, #200]	; (8002b70 <USB_SetTurnaroundTime+0x12c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d802      	bhi.n	8002ab0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002aaa:	230c      	movs	r3, #12
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e041      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <USB_SetTurnaroundTime+0x12c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d906      	bls.n	8002ac6 <USB_SetTurnaroundTime+0x82>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <USB_SetTurnaroundTime+0x130>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d802      	bhi.n	8002ac6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ac0:	230b      	movs	r3, #11
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e036      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <USB_SetTurnaroundTime+0x130>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d906      	bls.n	8002adc <USB_SetTurnaroundTime+0x98>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4a29      	ldr	r2, [pc, #164]	; (8002b78 <USB_SetTurnaroundTime+0x134>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d802      	bhi.n	8002adc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002ad6:	230a      	movs	r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e02b      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <USB_SetTurnaroundTime+0x134>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d906      	bls.n	8002af2 <USB_SetTurnaroundTime+0xae>
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <USB_SetTurnaroundTime+0x138>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d202      	bcs.n	8002af2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002aec:	2309      	movs	r3, #9
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e020      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <USB_SetTurnaroundTime+0x138>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d306      	bcc.n	8002b08 <USB_SetTurnaroundTime+0xc4>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <USB_SetTurnaroundTime+0x13c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d802      	bhi.n	8002b08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b02:	2308      	movs	r3, #8
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e015      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <USB_SetTurnaroundTime+0x13c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d906      	bls.n	8002b1e <USB_SetTurnaroundTime+0xda>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <USB_SetTurnaroundTime+0x140>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d202      	bcs.n	8002b1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e00a      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b1e:	2306      	movs	r3, #6
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e007      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b2a:	2309      	movs	r3, #9
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e001      	b.n	8002b34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b30:	2309      	movs	r3, #9
 8002b32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	029b      	lsls	r3, r3, #10
 8002b48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	00d8acbf 	.word	0x00d8acbf
 8002b64:	00e4e1c0 	.word	0x00e4e1c0
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	01067380 	.word	0x01067380
 8002b70:	011a499f 	.word	0x011a499f
 8002b74:	01312cff 	.word	0x01312cff
 8002b78:	014ca43f 	.word	0x014ca43f
 8002b7c:	016e3600 	.word	0x016e3600
 8002b80:	01a6ab1f 	.word	0x01a6ab1f
 8002b84:	01e84800 	.word	0x01e84800

08002b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f023 0201 	bic.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d106      	bne.n	8002bf8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e00b      	b.n	8002c10 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	e001      	b.n	8002c10 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e003      	b.n	8002c18 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002c10:	2032      	movs	r0, #50	; 0x32
 8002c12:	f7fd fe13 	bl	800083c <HAL_Delay>

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c20:	b084      	sub	sp, #16
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	e009      	b.n	8002c54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3340      	adds	r3, #64	; 0x40
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	3301      	adds	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0e      	cmp	r3, #14
 8002c58:	d9f2      	bls.n	8002c40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11c      	bne.n	8002c9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	639a      	str	r2, [r3, #56]	; 0x38
 8002c98:	e00b      	b.n	8002cb2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ccc:	461a      	mov	r2, r3
 8002cce:	680b      	ldr	r3, [r1, #0]
 8002cd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10c      	bne.n	8002cf2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d104      	bne.n	8002ce8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002cde:	2100      	movs	r1, #0
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f949 	bl	8002f78 <USB_SetDevSpeed>
 8002ce6:	e008      	b.n	8002cfa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f944 	bl	8002f78 <USB_SetDevSpeed>
 8002cf0:	e003      	b.n	8002cfa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f93f 	bl	8002f78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cfa:	2110      	movs	r1, #16
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f8f3 	bl	8002ee8 <USB_FlushTxFifo>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f911 	bl	8002f34 <USB_FlushRxFifo>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d22:	461a      	mov	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2300      	movs	r3, #0
 8002d32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	e043      	b.n	8002dce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d5c:	d118      	bne.n	8002d90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10a      	bne.n	8002d7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d70:	461a      	mov	r2, r3
 8002d72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e013      	b.n	8002da2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d86:	461a      	mov	r2, r3
 8002d88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e008      	b.n	8002da2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dae:	461a      	mov	r2, r3
 8002db0:	2300      	movs	r3, #0
 8002db2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d3b7      	bcc.n	8002d46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	e043      	b.n	8002e64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df2:	d118      	bne.n	8002e26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e06:	461a      	mov	r2, r3
 8002e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e013      	b.n	8002e38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	e008      	b.n	8002e38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	2300      	movs	r3, #0
 8002e36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e44:	461a      	mov	r2, r3
 8002e46:	2300      	movs	r3, #0
 8002e48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	3301      	adds	r3, #1
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d3b7      	bcc.n	8002ddc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f043 0210 	orr.w	r2, r3, #16
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <USB_DevInit+0x2c4>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f043 0208 	orr.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ecc:	f043 0304 	orr.w	r3, r3, #4
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ee0:	b004      	add	sp, #16
 8002ee2:	4770      	bx	lr
 8002ee4:	803c3800 	.word	0x803c3800

08002ee8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <USB_FlushTxFifo+0x48>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e006      	b.n	8002f22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d0f0      	beq.n	8002f02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	00030d40 	.word	0x00030d40

08002f34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2210      	movs	r2, #16
 8002f44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <USB_FlushRxFifo+0x40>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d901      	bls.n	8002f58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e006      	b.n	8002f66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d0f0      	beq.n	8002f46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	00030d40 	.word	0x00030d40

08002f78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b087      	sub	sp, #28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0306 	and.w	r3, r3, #6
 8002fc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
 8002fce:	e00a      	b.n	8002fe6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d002      	beq.n	8002fdc <USB_GetDevSpeed+0x32>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b06      	cmp	r3, #6
 8002fda:	d102      	bne.n	8002fe2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	75fb      	strb	r3, [r7, #23]
 8002fe0:	e001      	b.n	8002fe6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d13a      	bne.n	8003086 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	b29b      	uxth	r3, r3
 8003028:	68f9      	ldr	r1, [r7, #12]
 800302a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800302e:	4313      	orrs	r3, r2
 8003030:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d155      	bne.n	80030f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	78db      	ldrb	r3, [r3, #3]
 8003062:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003064:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	059b      	lsls	r3, r3, #22
 800306a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800306c:	4313      	orrs	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	440a      	add	r2, r1
 8003076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800307a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e036      	b.n	80030f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	68f9      	ldr	r1, [r7, #12]
 80030a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11a      	bne.n	80030f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	78db      	ldrb	r3, [r3, #3]
 80030d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030da:	430b      	orrs	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	785b      	ldrb	r3, [r3, #1]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d161      	bne.n	80031e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003136:	d11f      	bne.n	8003178 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	0151      	lsls	r1, r2, #5
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	440a      	add	r2, r1
 800314e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003156:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	0151      	lsls	r1, r2, #5
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	440a      	add	r2, r1
 800316e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003172:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003176:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	2101      	movs	r1, #1
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003198:	4013      	ands	r3, r2
 800319a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	2101      	movs	r1, #1
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	68f9      	ldr	r1, [r7, #12]
 80031b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031bc:	4013      	ands	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0159      	lsls	r1, r3, #5
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	440b      	add	r3, r1
 80031d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031da:	4619      	mov	r1, r3
 80031dc:	4b35      	ldr	r3, [pc, #212]	; (80032b4 <USB_DeactivateEndpoint+0x1b0>)
 80031de:	4013      	ands	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
 80031e2:	e060      	b.n	80032a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fa:	d11f      	bne.n	800323c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	0151      	lsls	r1, r2, #5
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	440a      	add	r2, r1
 8003212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003216:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800321a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	440a      	add	r2, r1
 8003232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003236:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800323a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	041b      	lsls	r3, r3, #16
 8003254:	43db      	mvns	r3, r3
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800325c:	4013      	ands	r3, r2
 800325e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	43db      	mvns	r3, r3
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003280:	4013      	ands	r3, r2
 8003282:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	0159      	lsls	r1, r3, #5
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	440b      	add	r3, r1
 800329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329e:	4619      	mov	r1, r3
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <USB_DeactivateEndpoint+0x1b4>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	ec337800 	.word	0xec337800
 80032b8:	eff37800 	.word	0xeff37800

080032bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	f040 815c 	bne.w	8003596 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d132      	bne.n	800334c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	0151      	lsls	r1, r2, #5
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	440a      	add	r2, r1
 80032fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003300:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003304:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	0151      	lsls	r1, r2, #5
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	440a      	add	r2, r1
 8003320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003324:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003328:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	0151      	lsls	r1, r2, #5
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	440a      	add	r2, r1
 8003340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003344:	0cdb      	lsrs	r3, r3, #19
 8003346:	04db      	lsls	r3, r3, #19
 8003348:	6113      	str	r3, [r2, #16]
 800334a:	e074      	b.n	8003436 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	440a      	add	r2, r1
 8003362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003366:	0cdb      	lsrs	r3, r3, #19
 8003368:	04db      	lsls	r3, r3, #19
 800336a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	440a      	add	r2, r1
 8003382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003386:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800338a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800338e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	4413      	add	r3, r2
 8003398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6959      	ldr	r1, [r3, #20]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	440b      	add	r3, r1
 80033a8:	1e59      	subs	r1, r3, #1
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	04d9      	lsls	r1, r3, #19
 80033b4:	4b9d      	ldr	r3, [pc, #628]	; (800362c <USB_EPStartXfer+0x370>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	0148      	lsls	r0, r1, #5
 80033bc:	69f9      	ldr	r1, [r7, #28]
 80033be:	4401      	add	r1, r0
 80033c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033c4:	4313      	orrs	r3, r2
 80033c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	0148      	lsls	r0, r1, #5
 80033e2:	69f9      	ldr	r1, [r7, #28]
 80033e4:	4401      	add	r1, r0
 80033e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	78db      	ldrb	r3, [r3, #3]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11f      	bne.n	8003436 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	0151      	lsls	r1, r2, #5
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	440a      	add	r2, r1
 800340c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003410:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003414:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	0151      	lsls	r1, r2, #5
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	440a      	add	r2, r1
 800342c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003434:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d14b      	bne.n	80034d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	78db      	ldrb	r3, [r3, #3]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d128      	bne.n	80034b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d110      	bne.n	8003492 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	0151      	lsls	r1, r2, #5
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	440a      	add	r2, r1
 8003486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800348a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	e00f      	b.n	80034b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	0151      	lsls	r1, r2, #5
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	440a      	add	r2, r1
 80034a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	0151      	lsls	r1, r2, #5
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	440a      	add	r2, r1
 80034c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e12f      	b.n	8003734 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80034f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	78db      	ldrb	r3, [r3, #3]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d015      	beq.n	8003528 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8117 	beq.w	8003734 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	69f9      	ldr	r1, [r7, #28]
 800351e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003522:	4313      	orrs	r3, r2
 8003524:	634b      	str	r3, [r1, #52]	; 0x34
 8003526:	e105      	b.n	8003734 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d110      	bne.n	800355a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	440a      	add	r2, r1
 800354e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e00f      	b.n	800357a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	0151      	lsls	r1, r2, #5
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	440a      	add	r2, r1
 8003570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003578:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	b298      	uxth	r0, r3
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	4603      	mov	r3, r0
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa2b 	bl	80039ea <USB_WritePacket>
 8003594:	e0ce      	b.n	8003734 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b0:	0cdb      	lsrs	r3, r3, #19
 80035b2:	04db      	lsls	r3, r3, #19
 80035b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	0151      	lsls	r1, r2, #5
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	440a      	add	r2, r1
 80035cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d126      	bne.n	8003630 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	0148      	lsls	r0, r1, #5
 80035fc:	69f9      	ldr	r1, [r7, #28]
 80035fe:	4401      	add	r1, r0
 8003600:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003604:	4313      	orrs	r3, r2
 8003606:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	440a      	add	r2, r1
 800361e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003626:	6113      	str	r3, [r2, #16]
 8003628:	e036      	b.n	8003698 <USB_EPStartXfer+0x3dc>
 800362a:	bf00      	nop
 800362c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4413      	add	r3, r2
 800363a:	1e5a      	subs	r2, r3, #1
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	8afb      	ldrh	r3, [r7, #22]
 8003656:	04d9      	lsls	r1, r3, #19
 8003658:	4b39      	ldr	r3, [pc, #228]	; (8003740 <USB_EPStartXfer+0x484>)
 800365a:	400b      	ands	r3, r1
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	0148      	lsls	r0, r1, #5
 8003660:	69f9      	ldr	r1, [r7, #28]
 8003662:	4401      	add	r1, r0
 8003664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	8af9      	ldrh	r1, [r7, #22]
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	69b9      	ldr	r1, [r7, #24]
 800368a:	0148      	lsls	r0, r1, #5
 800368c:	69f9      	ldr	r1, [r7, #28]
 800368e:	4401      	add	r1, r0
 8003690:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003694:	4313      	orrs	r3, r2
 8003696:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10d      	bne.n	80036ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	68d9      	ldr	r1, [r3, #12]
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	460a      	mov	r2, r1
 80036b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	78db      	ldrb	r3, [r3, #3]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d128      	bne.n	8003714 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d110      	bne.n	80036f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	0151      	lsls	r1, r2, #5
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	440a      	add	r2, r1
 80036e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e00f      	b.n	8003714 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	0151      	lsls	r1, r2, #5
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	440a      	add	r2, r1
 800370a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800370e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003712:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	440a      	add	r2, r1
 800372a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800372e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	1ff80000 	.word	0x1ff80000

08003744 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	785b      	ldrb	r3, [r3, #1]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 80cd 	bne.w	8003900 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d132      	bne.n	80037d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003788:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800378c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037cc:	0cdb      	lsrs	r3, r3, #19
 80037ce:	04db      	lsls	r3, r3, #19
 80037d0:	6113      	str	r3, [r2, #16]
 80037d2:	e04e      	b.n	8003872 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ee:	0cdb      	lsrs	r3, r3, #19
 80037f0:	04db      	lsls	r3, r3, #19
 80037f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	440a      	add	r2, r1
 800380a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003812:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003816:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	429a      	cmp	r2, r3
 8003822:	d903      	bls.n	800382c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	440a      	add	r2, r1
 8003842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800384a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	0148      	lsls	r0, r1, #5
 8003866:	6979      	ldr	r1, [r7, #20]
 8003868:	4401      	add	r1, r0
 800386a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800386e:	4313      	orrs	r3, r2
 8003870:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d11e      	bne.n	80038b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e092      	b.n	80039dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	0151      	lsls	r1, r2, #5
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	440a      	add	r2, r1
 80038cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d07e      	beq.n	80039dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038fa:	4313      	orrs	r3, r2
 80038fc:	634b      	str	r3, [r1, #52]	; 0x34
 80038fe:	e06d      	b.n	80039dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391a:	0cdb      	lsrs	r3, r3, #19
 800391c:	04db      	lsls	r3, r3, #19
 800391e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800393e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003942:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003972:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	0148      	lsls	r0, r1, #5
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	4401      	add	r1, r0
 8003992:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003996:	4313      	orrs	r3, r2
 8003998:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10d      	bne.n	80039bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68d9      	ldr	r1, [r3, #12]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	460a      	mov	r2, r1
 80039ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b089      	sub	sp, #36	; 0x24
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	4611      	mov	r1, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	460b      	mov	r3, r1
 80039fa:	71fb      	strb	r3, [r7, #7]
 80039fc:	4613      	mov	r3, r2
 80039fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11a      	bne.n	8003a46 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a10:	88bb      	ldrh	r3, [r7, #4]
 8003a12:	3303      	adds	r3, #3
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	e00f      	b.n	8003a3e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	031a      	lsls	r2, r3, #12
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3304      	adds	r3, #4
 8003a36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d3eb      	bcc.n	8003a1e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3724      	adds	r7, #36	; 0x24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	; 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	3303      	adds	r3, #3
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e00b      	b.n	8003a90 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	601a      	str	r2, [r3, #0]
    pDest++;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3304      	adds	r3, #4
 8003a88:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d3ef      	bcc.n	8003a78 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003a98:	69fb      	ldr	r3, [r7, #28]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	785b      	ldrb	r3, [r3, #1]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d12c      	bne.n	8003b1c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	db12      	blt.n	8003afa <USB_EPSetStall+0x54>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00f      	beq.n	8003afa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003af8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e02b      	b.n	8003b74 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db12      	blt.n	8003b54 <USB_EPSetStall+0xae>
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00f      	beq.n	8003b54 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b52:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	785b      	ldrb	r3, [r3, #1]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d128      	bne.n	8003bf0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	0151      	lsls	r1, r2, #5
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	78db      	ldrb	r3, [r3, #3]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d003      	beq.n	8003bce <USB_EPClearStall+0x4c>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	78db      	ldrb	r3, [r3, #3]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d138      	bne.n	8003c40 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e027      	b.n	8003c40 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d003      	beq.n	8003c20 <USB_EPClearStall+0x9e>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	78db      	ldrb	r3, [r3, #3]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d10f      	bne.n	8003c40 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cb4:	f023 0303 	bic.w	r3, r3, #3
 8003cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc8:	f023 0302 	bic.w	r3, r3, #2
 8003ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d36:	68fb      	ldr	r3, [r7, #12]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	b29b      	uxth	r3, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003dda:	68bb      	ldr	r3, [r7, #8]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
 8003e18:	01db      	lsls	r3, r3, #7
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e36:	68bb      	ldr	r3, [r7, #8]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0301 	and.w	r3, r3, #1
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
	...

08003ea8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	333c      	adds	r3, #60	; 0x3c
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <USB_EP0_OutStart+0xb8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d90a      	bls.n	8003ee2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003edc:	d101      	bne.n	8003ee2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e037      	b.n	8003f52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003efc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f10:	f043 0318 	orr.w	r3, r3, #24
 8003f14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10f      	bne.n	8003f50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003f4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	4f54300a 	.word	0x4f54300a

08003f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3301      	adds	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <USB_CoreReset+0x64>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e01b      	b.n	8003fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	daf2      	bge.n	8003f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f043 0201 	orr.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <USB_CoreReset+0x64>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e006      	b.n	8003fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d0f0      	beq.n	8003f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	00030d40 	.word	0x00030d40

08003fcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003fd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003fdc:	f002 f95c 	bl	8006298 <USBD_static_malloc>
 8003fe0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e066      	b.n	80040c2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7c1b      	ldrb	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d119      	bne.n	8004038 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004008:	2202      	movs	r2, #2
 800400a:	2181      	movs	r1, #129	; 0x81
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f002 f820 	bl	8006052 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401c:	2202      	movs	r2, #2
 800401e:	2101      	movs	r1, #1
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f002 f816 	bl	8006052 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2210      	movs	r2, #16
 8004032:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004036:	e016      	b.n	8004066 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004038:	2340      	movs	r3, #64	; 0x40
 800403a:	2202      	movs	r2, #2
 800403c:	2181      	movs	r1, #129	; 0x81
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f002 f807 	bl	8006052 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	2202      	movs	r2, #2
 800404e:	2101      	movs	r1, #1
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f001 fffe 	bl	8006052 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2210      	movs	r2, #16
 8004062:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004066:	2308      	movs	r3, #8
 8004068:	2203      	movs	r2, #3
 800406a:	2182      	movs	r1, #130	; 0x82
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f001 fff0 	bl	8006052 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7c1b      	ldrb	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a6:	2101      	movs	r1, #1
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f002 f8c1 	bl	8006230 <USBD_LL_PrepareReceive>
 80040ae:	e007      	b.n	80040c0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	2101      	movs	r1, #1
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f002 f8b8 	bl	8006230 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b082      	sub	sp, #8
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80040d6:	2181      	movs	r1, #129	; 0x81
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f001 ffe0 	bl	800609e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80040e4:	2101      	movs	r1, #1
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 ffd9 	bl	800609e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80040f4:	2182      	movs	r1, #130	; 0x82
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f001 ffd1 	bl	800609e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004126:	4618      	mov	r0, r3
 8004128:	f002 f8c4 	bl	80062b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004150:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004164:	2303      	movs	r3, #3
 8004166:	e0af      	b.n	80042c8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004170:	2b00      	cmp	r3, #0
 8004172:	d03f      	beq.n	80041f4 <USBD_CDC_Setup+0xb4>
 8004174:	2b20      	cmp	r3, #32
 8004176:	f040 809f 	bne.w	80042b8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	88db      	ldrh	r3, [r3, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02e      	beq.n	80041e0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b25b      	sxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	da16      	bge.n	80041ba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004198:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	88d2      	ldrh	r2, [r2, #6]
 800419e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	88db      	ldrh	r3, [r3, #6]
 80041a4:	2b07      	cmp	r3, #7
 80041a6:	bf28      	it	cs
 80041a8:	2307      	movcs	r3, #7
 80041aa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	89fa      	ldrh	r2, [r7, #14]
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 fb19 	bl	80057ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80041b8:	e085      	b.n	80042c6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	785a      	ldrb	r2, [r3, #1]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	88db      	ldrh	r3, [r3, #6]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80041d0:	6939      	ldr	r1, [r7, #16]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	88db      	ldrh	r3, [r3, #6]
 80041d6:	461a      	mov	r2, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 fb32 	bl	8005842 <USBD_CtlPrepareRx>
      break;
 80041de:	e072      	b.n	80042c6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	7850      	ldrb	r0, [r2, #1]
 80041ec:	2200      	movs	r2, #0
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	4798      	blx	r3
      break;
 80041f2:	e068      	b.n	80042c6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	785b      	ldrb	r3, [r3, #1]
 80041f8:	2b0b      	cmp	r3, #11
 80041fa:	d852      	bhi.n	80042a2 <USBD_CDC_Setup+0x162>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <USBD_CDC_Setup+0xc4>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004235 	.word	0x08004235
 8004208:	080042b1 	.word	0x080042b1
 800420c:	080042a3 	.word	0x080042a3
 8004210:	080042a3 	.word	0x080042a3
 8004214:	080042a3 	.word	0x080042a3
 8004218:	080042a3 	.word	0x080042a3
 800421c:	080042a3 	.word	0x080042a3
 8004220:	080042a3 	.word	0x080042a3
 8004224:	080042a3 	.word	0x080042a3
 8004228:	080042a3 	.word	0x080042a3
 800422c:	0800425f 	.word	0x0800425f
 8004230:	08004289 	.word	0x08004289
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b03      	cmp	r3, #3
 800423e:	d107      	bne.n	8004250 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004240:	f107 030a 	add.w	r3, r7, #10
 8004244:	2202      	movs	r2, #2
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 face 	bl	80057ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800424e:	e032      	b.n	80042b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004250:	6839      	ldr	r1, [r7, #0]
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f001 fa58 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 8004258:	2303      	movs	r3, #3
 800425a:	75fb      	strb	r3, [r7, #23]
          break;
 800425c:	e02b      	b.n	80042b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b03      	cmp	r3, #3
 8004268:	d107      	bne.n	800427a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800426a:	f107 030d 	add.w	r3, r7, #13
 800426e:	2201      	movs	r2, #1
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f001 fab9 	bl	80057ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004278:	e01d      	b.n	80042b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 fa43 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 8004282:	2303      	movs	r3, #3
 8004284:	75fb      	strb	r3, [r7, #23]
          break;
 8004286:	e016      	b.n	80042b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b03      	cmp	r3, #3
 8004292:	d00f      	beq.n	80042b4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f001 fa36 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 800429c:	2303      	movs	r3, #3
 800429e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80042a0:	e008      	b.n	80042b4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 fa2f 	bl	8005708 <USBD_CtlError>
          ret = USBD_FAIL;
 80042aa:	2303      	movs	r3, #3
 80042ac:	75fb      	strb	r3, [r7, #23]
          break;
 80042ae:	e002      	b.n	80042b6 <USBD_CDC_Setup+0x176>
          break;
 80042b0:	bf00      	nop
 80042b2:	e008      	b.n	80042c6 <USBD_CDC_Setup+0x186>
          break;
 80042b4:	bf00      	nop
      }
      break;
 80042b6:	e006      	b.n	80042c6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f001 fa24 	bl	8005708 <USBD_CtlError>
      ret = USBD_FAIL;
 80042c0:	2303      	movs	r3, #3
 80042c2:	75fb      	strb	r3, [r7, #23]
      break;
 80042c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80042e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e04f      	b.n	8004392 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3318      	adds	r3, #24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d029      	beq.n	8004364 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3318      	adds	r3, #24
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	78f9      	ldrb	r1, [r7, #3]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	460b      	mov	r3, r1
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	1a5b      	subs	r3, r3, r1
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4403      	add	r3, r0
 8004330:	3344      	adds	r3, #68	; 0x44
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	fbb2 f1f3 	udiv	r1, r2, r3
 8004338:	fb03 f301 	mul.w	r3, r3, r1
 800433c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800433e:	2b00      	cmp	r3, #0
 8004340:	d110      	bne.n	8004364 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3318      	adds	r3, #24
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004356:	78f9      	ldrb	r1, [r7, #3]
 8004358:	2300      	movs	r3, #0
 800435a:	2200      	movs	r2, #0
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 ff46 	bl	80061ee <USBD_LL_Transmit>
 8004362:	e015      	b.n	8004390 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00b      	beq.n	8004390 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e015      	b.n	80043e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f001 ff56 	bl	8006272 <USBD_LL_GetRxDataSize>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80043e2:	4611      	mov	r1, r2
 80043e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004406:	2303      	movs	r3, #3
 8004408:	e01b      	b.n	8004442 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <USBD_CDC_EP0_RxReady+0x50>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	d010      	beq.n	8004440 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800442c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004434:	b292      	uxth	r2, r2
 8004436:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	22ff      	movs	r2, #255	; 0xff
 800443c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2243      	movs	r2, #67	; 0x43
 8004458:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800445a:	4b03      	ldr	r3, [pc, #12]	; (8004468 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	200000b4 	.word	0x200000b4

0800446c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2243      	movs	r2, #67	; 0x43
 8004478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800447a:	4b03      	ldr	r3, [pc, #12]	; (8004488 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20000070 	.word	0x20000070

0800448c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2243      	movs	r2, #67	; 0x43
 8004498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800449a:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	200000f8 	.word	0x200000f8

080044ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	220a      	movs	r2, #10
 80044b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80044ba:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	2000002c 	.word	0x2000002c

080044cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80044dc:	2303      	movs	r3, #3
 80044de:	e004      	b.n	80044ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004508:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004510:	2303      	movs	r3, #3
 8004512:	e008      	b.n	8004526 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004542:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800454a:	2303      	movs	r3, #3
 800454c:	e004      	b.n	8004558 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004572:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004582:	2303      	movs	r3, #3
 8004584:	e01a      	b.n	80045bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800458c:	2b00      	cmp	r3, #0
 800458e:	d114      	bne.n	80045ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2201      	movs	r2, #1
 8004594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045ae:	2181      	movs	r1, #129	; 0x81
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 fe1c 	bl	80061ee <USBD_LL_Transmit>

    ret = USBD_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80045de:	2303      	movs	r3, #3
 80045e0:	e016      	b.n	8004610 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7c1b      	ldrb	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f4:	2101      	movs	r1, #1
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f001 fe1a 	bl	8006230 <USBD_LL_PrepareReceive>
 80045fc:	e007      	b.n	800460e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004604:	2340      	movs	r3, #64	; 0x40
 8004606:	2101      	movs	r1, #1
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 fe11 	bl	8006230 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800462c:	2303      	movs	r3, #3
 800462e:	e01f      	b.n	8004670 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	79fa      	ldrb	r2, [r7, #7]
 8004662:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f001 fc8d 	bl	8005f84 <USBD_LL_Init>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800468c:	2303      	movs	r3, #3
 800468e:	e016      	b.n	80046be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f107 020e 	add.w	r2, r7, #14
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 fca4 	bl	800601c <USBD_LL_Start>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004700:	2303      	movs	r3, #3
 8004702:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	4611      	mov	r1, r2
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	4611      	mov	r1, r2
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
  }

  return USBD_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ff90 	bl	8005694 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2b02      	cmp	r3, #2
 8004796:	d01a      	beq.n	80047ce <USBD_LL_SetupStage+0x72>
 8004798:	2b02      	cmp	r3, #2
 800479a:	d822      	bhi.n	80047e2 <USBD_LL_SetupStage+0x86>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <USBD_LL_SetupStage+0x4a>
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d00a      	beq.n	80047ba <USBD_LL_SetupStage+0x5e>
 80047a4:	e01d      	b.n	80047e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa62 	bl	8004c78 <USBD_StdDevReq>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
      break;
 80047b8:	e020      	b.n	80047fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fac6 	bl	8004d54 <USBD_StdItfReq>
 80047c8:	4603      	mov	r3, r0
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e016      	b.n	80047fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fb05 	bl	8004de6 <USBD_StdEPReq>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	e00c      	b.n	80047fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80047e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fc73 	bl	80060dc <USBD_LL_StallEP>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]
      break;
 80047fa:	bf00      	nop
  }

  return ret;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	460b      	mov	r3, r1
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004814:	7afb      	ldrb	r3, [r7, #11]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d138      	bne.n	800488c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004820:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004828:	2b03      	cmp	r3, #3
 800482a:	d14a      	bne.n	80048c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d913      	bls.n	8004860 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	1ad2      	subs	r2, r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4293      	cmp	r3, r2
 8004850:	bf28      	it	cs
 8004852:	4613      	movcs	r3, r2
 8004854:	461a      	mov	r2, r3
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f001 f80f 	bl	800587c <USBD_CtlContinueRx>
 800485e:	e030      	b.n	80048c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d10b      	bne.n	8004884 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f001 f80a 	bl	800589e <USBD_CtlSendStatus>
 800488a:	e01a      	b.n	80048c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d114      	bne.n	80048c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	7afa      	ldrb	r2, [r7, #11]
 80048ae:	4611      	mov	r1, r2
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	4798      	blx	r3
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	e000      	b.n	80048c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	460b      	mov	r3, r1
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d16b      	bne.n	80049b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3314      	adds	r3, #20
 80048e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d156      	bne.n	800499e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d914      	bls.n	8004926 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	1ad2      	subs	r2, r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	461a      	mov	r2, r3
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 ff84 	bl	8005820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004918:	2300      	movs	r3, #0
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f001 fc86 	bl	8006230 <USBD_LL_PrepareReceive>
 8004924:	e03b      	b.n	800499e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d11c      	bne.n	800496c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800493a:	429a      	cmp	r2, r3
 800493c:	d316      	bcc.n	800496c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004948:	429a      	cmp	r2, r3
 800494a:	d20f      	bcs.n	800496c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	2100      	movs	r1, #0
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 ff65 	bl	8005820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800495e:	2300      	movs	r3, #0
 8004960:	2200      	movs	r2, #0
 8004962:	2100      	movs	r1, #0
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f001 fc63 	bl	8006230 <USBD_LL_PrepareReceive>
 800496a:	e018      	b.n	800499e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b03      	cmp	r3, #3
 8004976:	d10b      	bne.n	8004990 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 fba2 	bl	80060dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 ff93 	bl	80058c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d122      	bne.n	80049ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fe98 	bl	80046de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80049b6:	e01a      	b.n	80049ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d114      	bne.n	80049ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00e      	beq.n	80049ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	7afa      	ldrb	r2, [r7, #11]
 80049da:	4611      	mov	r1, r2
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	4798      	blx	r3
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	e000      	b.n	80049f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e02f      	b.n	8004a8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00f      	beq.n	8004a56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6852      	ldr	r2, [r2, #4]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	4611      	mov	r1, r2
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 faf8 	bl	8006052 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2240      	movs	r2, #64	; 0x40
 8004a6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a72:	2340      	movs	r3, #64	; 0x40
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 faea 	bl	8006052 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2240      	movs	r2, #64	; 0x40
 8004a88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2204      	movs	r2, #4
 8004ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d106      	bne.n	8004b02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e012      	b.n	8004b4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d10b      	bne.n	8004b4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e014      	b.n	8004b98 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d10d      	bne.n	8004b96 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	4611      	mov	r1, r2
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e014      	b.n	8004be4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d10d      	bne.n	8004be2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6852      	ldr	r2, [r2, #4]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
  }

  return USBD_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004c58:	8a3b      	ldrh	r3, [r7, #16]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004c68:	89fb      	ldrh	r3, [r7, #14]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d005      	beq.n	8004c9e <USBD_StdDevReq+0x26>
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d853      	bhi.n	8004d3e <USBD_StdDevReq+0xc6>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <USBD_StdDevReq+0x3a>
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d14f      	bne.n	8004d3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb0:	e04a      	b.n	8004d48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d83b      	bhi.n	8004d32 <USBD_StdDevReq+0xba>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <USBD_StdDevReq+0x48>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d33 	.word	0x08004d33
 8004ccc:	08004d1f 	.word	0x08004d1f
 8004cd0:	08004d33 	.word	0x08004d33
 8004cd4:	08004cf3 	.word	0x08004cf3
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004d33 	.word	0x08004d33
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004cfd 	.word	0x08004cfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9de 	bl	80050ac <USBD_GetDescriptor>
          break;
 8004cf0:	e024      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb43 	bl	8005380 <USBD_SetAddress>
          break;
 8004cfa:	e01f      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fb82 	bl	8005408 <USBD_SetConfig>
 8004d04:	4603      	mov	r3, r0
 8004d06:	73fb      	strb	r3, [r7, #15]
          break;
 8004d08:	e018      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fc21 	bl	8005554 <USBD_GetConfig>
          break;
 8004d12:	e013      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fc52 	bl	80055c0 <USBD_GetStatus>
          break;
 8004d1c:	e00e      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fc81 	bl	8005628 <USBD_SetFeature>
          break;
 8004d26:	e009      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fc90 	bl	8005650 <USBD_ClrFeature>
          break;
 8004d30:	e004      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fce7 	bl	8005708 <USBD_CtlError>
          break;
 8004d3a:	bf00      	nop
      }
      break;
 8004d3c:	e004      	b.n	8004d48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fce1 	bl	8005708 <USBD_CtlError>
      break;
 8004d46:	bf00      	nop
  }

  return ret;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d005      	beq.n	8004d7a <USBD_StdItfReq+0x26>
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d82f      	bhi.n	8004dd2 <USBD_StdItfReq+0x7e>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <USBD_StdItfReq+0x26>
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d12b      	bne.n	8004dd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d81d      	bhi.n	8004dc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	889b      	ldrh	r3, [r3, #4]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d813      	bhi.n	8004dba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	88db      	ldrh	r3, [r3, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d110      	bne.n	8004dce <USBD_StdItfReq+0x7a>
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fd73 	bl	800589e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004db8:	e009      	b.n	8004dce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fca3 	bl	8005708 <USBD_CtlError>
          break;
 8004dc2:	e004      	b.n	8004dce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fc9e 	bl	8005708 <USBD_CtlError>
          break;
 8004dcc:	e000      	b.n	8004dd0 <USBD_StdItfReq+0x7c>
          break;
 8004dce:	bf00      	nop
      }
      break;
 8004dd0:	e004      	b.n	8004ddc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fc97 	bl	8005708 <USBD_CtlError>
      break;
 8004dda:	bf00      	nop
  }

  return ret;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	889b      	ldrh	r3, [r3, #4]
 8004df8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d007      	beq.n	8004e16 <USBD_StdEPReq+0x30>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	f200 8145 	bhi.w	8005096 <USBD_StdEPReq+0x2b0>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <USBD_StdEPReq+0x44>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	f040 8140 	bne.w	8005096 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
      break;
 8004e28:	e13a      	b.n	80050a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d007      	beq.n	8004e42 <USBD_StdEPReq+0x5c>
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	f300 8129 	bgt.w	800508a <USBD_StdEPReq+0x2a4>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d07f      	beq.n	8004f3c <USBD_StdEPReq+0x156>
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d03c      	beq.n	8004eba <USBD_StdEPReq+0xd4>
 8004e40:	e123      	b.n	800508a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d002      	beq.n	8004e54 <USBD_StdEPReq+0x6e>
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d016      	beq.n	8004e80 <USBD_StdEPReq+0x9a>
 8004e52:	e02c      	b.n	8004eae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <USBD_StdEPReq+0x90>
 8004e5a:	7bbb      	ldrb	r3, [r7, #14]
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d00a      	beq.n	8004e76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e60:	7bbb      	ldrb	r3, [r7, #14]
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 f939 	bl	80060dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e6a:	2180      	movs	r1, #128	; 0x80
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f935 	bl	80060dc <USBD_LL_StallEP>
 8004e72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004e74:	e020      	b.n	8004eb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fc45 	bl	8005708 <USBD_CtlError>
              break;
 8004e7e:	e01b      	b.n	8004eb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	885b      	ldrh	r3, [r3, #2]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10e      	bne.n	8004ea6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004e88:	7bbb      	ldrb	r3, [r7, #14]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <USBD_StdEPReq+0xc0>
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d008      	beq.n	8004ea6 <USBD_StdEPReq+0xc0>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 f91b 	bl	80060dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fcf9 	bl	800589e <USBD_CtlSendStatus>

              break;
 8004eac:	e004      	b.n	8004eb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fc29 	bl	8005708 <USBD_CtlError>
              break;
 8004eb6:	bf00      	nop
          }
          break;
 8004eb8:	e0ec      	b.n	8005094 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d002      	beq.n	8004ecc <USBD_StdEPReq+0xe6>
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d016      	beq.n	8004ef8 <USBD_StdEPReq+0x112>
 8004eca:	e030      	b.n	8004f2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ecc:	7bbb      	ldrb	r3, [r7, #14]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <USBD_StdEPReq+0x108>
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d00a      	beq.n	8004eee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 f8fd 	bl	80060dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 f8f9 	bl	80060dc <USBD_LL_StallEP>
 8004eea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004eec:	e025      	b.n	8004f3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fc09 	bl	8005708 <USBD_CtlError>
              break;
 8004ef6:	e020      	b.n	8004f3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	885b      	ldrh	r3, [r3, #2]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11b      	bne.n	8004f38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 f903 	bl	800611a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fcc2 	bl	800589e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004f2c:	e004      	b.n	8004f38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbe9 	bl	8005708 <USBD_CtlError>
              break;
 8004f36:	e000      	b.n	8004f3a <USBD_StdEPReq+0x154>
              break;
 8004f38:	bf00      	nop
          }
          break;
 8004f3a:	e0ab      	b.n	8005094 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d002      	beq.n	8004f4e <USBD_StdEPReq+0x168>
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d032      	beq.n	8004fb2 <USBD_StdEPReq+0x1cc>
 8004f4c:	e097      	b.n	800507e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f4e:	7bbb      	ldrb	r3, [r7, #14]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <USBD_StdEPReq+0x17e>
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d004      	beq.n	8004f64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fbd3 	bl	8005708 <USBD_CtlError>
                break;
 8004f62:	e091      	b.n	8005088 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da0b      	bge.n	8004f84 <USBD_StdEPReq+0x19e>
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	3310      	adds	r3, #16
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	3304      	adds	r3, #4
 8004f82:	e00b      	b.n	8004f9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fc1d 	bl	80057ea <USBD_CtlSendData>
              break;
 8004fb0:	e06a      	b.n	8005088 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da11      	bge.n	8004fde <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	f003 020f 	and.w	r2, r3, #15
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3324      	adds	r3, #36	; 0x24
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d117      	bne.n	8005004 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fb96 	bl	8005708 <USBD_CtlError>
                  break;
 8004fdc:	e054      	b.n	8005088 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fde:	7bbb      	ldrb	r3, [r7, #14]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fb83 	bl	8005708 <USBD_CtlError>
                  break;
 8005002:	e041      	b.n	8005088 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0b      	bge.n	8005024 <USBD_StdEPReq+0x23e>
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	3310      	adds	r3, #16
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	3304      	adds	r3, #4
 8005022:	e00b      	b.n	800503c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4413      	add	r3, r2
 800503a:	3304      	adds	r3, #4
 800503c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <USBD_StdEPReq+0x264>
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d103      	bne.n	8005052 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e00e      	b.n	8005070 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005052:	7bbb      	ldrb	r3, [r7, #14]
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f001 f87e 	bl	8006158 <USBD_LL_IsStallEP>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e002      	b.n	8005070 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2202      	movs	r2, #2
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fbb7 	bl	80057ea <USBD_CtlSendData>
              break;
 800507c:	e004      	b.n	8005088 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fb41 	bl	8005708 <USBD_CtlError>
              break;
 8005086:	bf00      	nop
          }
          break;
 8005088:	e004      	b.n	8005094 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb3b 	bl	8005708 <USBD_CtlError>
          break;
 8005092:	bf00      	nop
      }
      break;
 8005094:	e004      	b.n	80050a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb35 	bl	8005708 <USBD_CtlError>
      break;
 800509e:	bf00      	nop
  }

  return ret;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	885b      	ldrh	r3, [r3, #2]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	f200 8128 	bhi.w	8005322 <USBD_GetDescriptor+0x276>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <USBD_GetDescriptor+0x2c>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	0800510d 	.word	0x0800510d
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	08005323 	.word	0x08005323
 80050e8:	08005323 	.word	0x08005323
 80050ec:	080052c3 	.word	0x080052c3
 80050f0:	080052ef 	.word	0x080052ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	7c12      	ldrb	r2, [r2, #16]
 8005100:	f107 0108 	add.w	r1, r7, #8
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
 8005108:	60f8      	str	r0, [r7, #12]
      break;
 800510a:	e112      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	7c1b      	ldrb	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10d      	bne.n	8005130 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	f107 0208 	add.w	r2, r7, #8
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
 8005124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	2202      	movs	r2, #2
 800512c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800512e:	e100      	b.n	8005332 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	f107 0208 	add.w	r2, r7, #8
 800513c:	4610      	mov	r0, r2
 800513e:	4798      	blx	r3
 8005140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	2202      	movs	r2, #2
 8005148:	701a      	strb	r2, [r3, #0]
      break;
 800514a:	e0f2      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	885b      	ldrh	r3, [r3, #2]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b05      	cmp	r3, #5
 8005154:	f200 80ac 	bhi.w	80052b0 <USBD_GetDescriptor+0x204>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <USBD_GetDescriptor+0xb4>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005179 	.word	0x08005179
 8005164:	080051ad 	.word	0x080051ad
 8005168:	080051e1 	.word	0x080051e1
 800516c:	08005215 	.word	0x08005215
 8005170:	08005249 	.word	0x08005249
 8005174:	0800527d 	.word	0x0800527d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	7c12      	ldrb	r2, [r2, #16]
 8005190:	f107 0108 	add.w	r1, r7, #8
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
 8005198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800519a:	e091      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fab2 	bl	8005708 <USBD_CtlError>
            err++;
 80051a4:	7afb      	ldrb	r3, [r7, #11]
 80051a6:	3301      	adds	r3, #1
 80051a8:	72fb      	strb	r3, [r7, #11]
          break;
 80051aa:	e089      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	7c12      	ldrb	r2, [r2, #16]
 80051c4:	f107 0108 	add.w	r1, r7, #8
 80051c8:	4610      	mov	r0, r2
 80051ca:	4798      	blx	r3
 80051cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051ce:	e077      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa98 	bl	8005708 <USBD_CtlError>
            err++;
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	3301      	adds	r3, #1
 80051dc:	72fb      	strb	r3, [r7, #11]
          break;
 80051de:	e06f      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	7c12      	ldrb	r2, [r2, #16]
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	4610      	mov	r0, r2
 80051fe:	4798      	blx	r3
 8005200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005202:	e05d      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa7e 	bl	8005708 <USBD_CtlError>
            err++;
 800520c:	7afb      	ldrb	r3, [r7, #11]
 800520e:	3301      	adds	r3, #1
 8005210:	72fb      	strb	r3, [r7, #11]
          break;
 8005212:	e055      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	7c12      	ldrb	r2, [r2, #16]
 800522c:	f107 0108 	add.w	r1, r7, #8
 8005230:	4610      	mov	r0, r2
 8005232:	4798      	blx	r3
 8005234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005236:	e043      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa64 	bl	8005708 <USBD_CtlError>
            err++;
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	3301      	adds	r3, #1
 8005244:	72fb      	strb	r3, [r7, #11]
          break;
 8005246:	e03b      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	7c12      	ldrb	r2, [r2, #16]
 8005260:	f107 0108 	add.w	r1, r7, #8
 8005264:	4610      	mov	r0, r2
 8005266:	4798      	blx	r3
 8005268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800526a:	e029      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa4a 	bl	8005708 <USBD_CtlError>
            err++;
 8005274:	7afb      	ldrb	r3, [r7, #11]
 8005276:	3301      	adds	r3, #1
 8005278:	72fb      	strb	r3, [r7, #11]
          break;
 800527a:	e021      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	7c12      	ldrb	r2, [r2, #16]
 8005294:	f107 0108 	add.w	r1, r7, #8
 8005298:	4610      	mov	r0, r2
 800529a:	4798      	blx	r3
 800529c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800529e:	e00f      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa30 	bl	8005708 <USBD_CtlError>
            err++;
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	3301      	adds	r3, #1
 80052ac:	72fb      	strb	r3, [r7, #11]
          break;
 80052ae:	e007      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa28 	bl	8005708 <USBD_CtlError>
          err++;
 80052b8:	7afb      	ldrb	r3, [r7, #11]
 80052ba:	3301      	adds	r3, #1
 80052bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80052be:	bf00      	nop
      }
      break;
 80052c0:	e037      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7c1b      	ldrb	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	4610      	mov	r0, r2
 80052d8:	4798      	blx	r3
 80052da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052dc:	e029      	b.n	8005332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa11 	bl	8005708 <USBD_CtlError>
        err++;
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	3301      	adds	r3, #1
 80052ea:	72fb      	strb	r3, [r7, #11]
      break;
 80052ec:	e021      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7c1b      	ldrb	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	f107 0208 	add.w	r2, r7, #8
 8005302:	4610      	mov	r0, r2
 8005304:	4798      	blx	r3
 8005306:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	2207      	movs	r2, #7
 800530e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005310:	e00f      	b.n	8005332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9f7 	bl	8005708 <USBD_CtlError>
        err++;
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	3301      	adds	r3, #1
 800531e:	72fb      	strb	r3, [r7, #11]
      break;
 8005320:	e007      	b.n	8005332 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f9ef 	bl	8005708 <USBD_CtlError>
      err++;
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	3301      	adds	r3, #1
 800532e:	72fb      	strb	r3, [r7, #11]
      break;
 8005330:	bf00      	nop
  }

  if (err != 0U)
 8005332:	7afb      	ldrb	r3, [r7, #11]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11e      	bne.n	8005376 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	88db      	ldrh	r3, [r3, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005340:	893b      	ldrh	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	88da      	ldrh	r2, [r3, #6]
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	4293      	cmp	r3, r2
 800534e:	bf28      	it	cs
 8005350:	4613      	movcs	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	461a      	mov	r2, r3
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa44 	bl	80057ea <USBD_CtlSendData>
 8005362:	e009      	b.n	8005378 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9ce 	bl	8005708 <USBD_CtlError>
 800536c:	e004      	b.n	8005378 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa95 	bl	800589e <USBD_CtlSendStatus>
 8005374:	e000      	b.n	8005378 <USBD_GetDescriptor+0x2cc>
    return;
 8005376:	bf00      	nop
  }
}
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	889b      	ldrh	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d131      	bne.n	80053f6 <USBD_SetAddress+0x76>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	88db      	ldrh	r3, [r3, #6]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d12d      	bne.n	80053f6 <USBD_SetAddress+0x76>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	885b      	ldrh	r3, [r3, #2]
 800539e:	2b7f      	cmp	r3, #127	; 0x7f
 80053a0:	d829      	bhi.n	80053f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	885b      	ldrh	r3, [r3, #2]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d104      	bne.n	80053c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9a3 	bl	8005708 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c2:	e01d      	b.n	8005400 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7bfa      	ldrb	r2, [r7, #15]
 80053c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 feed 	bl	80061b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa61 	bl	800589e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ea:	e009      	b.n	8005400 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f4:	e004      	b.n	8005400 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f985 	bl	8005708 <USBD_CtlError>
  }
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <USBD_SetConfig+0x148>)
 800541e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <USBD_SetConfig+0x148>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d905      	bls.n	8005434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f96c 	bl	8005708 <USBD_CtlError>
    return USBD_FAIL;
 8005430:	2303      	movs	r3, #3
 8005432:	e088      	b.n	8005546 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d002      	beq.n	8005446 <USBD_SetConfig+0x3e>
 8005440:	2b03      	cmp	r3, #3
 8005442:	d025      	beq.n	8005490 <USBD_SetConfig+0x88>
 8005444:	e071      	b.n	800552a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005446:	4b42      	ldr	r3, [pc, #264]	; (8005550 <USBD_SetConfig+0x148>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01c      	beq.n	8005488 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <USBD_SetConfig+0x148>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005458:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <USBD_SetConfig+0x148>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff f948 	bl	80046f4 <USBD_SetClassConfig>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f949 	bl	8005708 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005476:	e065      	b.n	8005544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fa10 	bl	800589e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2203      	movs	r2, #3
 8005482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005486:	e05d      	b.n	8005544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fa08 	bl	800589e <USBD_CtlSendStatus>
      break;
 800548e:	e059      	b.n	8005544 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005490:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <USBD_SetConfig+0x148>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d112      	bne.n	80054be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <USBD_SetConfig+0x148>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80054aa:	4b29      	ldr	r3, [pc, #164]	; (8005550 <USBD_SetConfig+0x148>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff f93b 	bl	800472c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9f1 	bl	800589e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80054bc:	e042      	b.n	8005544 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <USBD_SetConfig+0x148>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d02a      	beq.n	8005522 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff f929 	bl	800472c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <USBD_SetConfig+0x148>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80054e4:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <USBD_SetConfig+0x148>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff f902 	bl	80046f4 <USBD_SetClassConfig>
 80054f0:	4603      	mov	r3, r0
 80054f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00f      	beq.n	800551a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f903 	bl	8005708 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff f90e 	bl	800472c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005518:	e014      	b.n	8005544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9bf 	bl	800589e <USBD_CtlSendStatus>
      break;
 8005520:	e010      	b.n	8005544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9bb 	bl	800589e <USBD_CtlSendStatus>
      break;
 8005528:	e00c      	b.n	8005544 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8eb 	bl	8005708 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <USBD_SetConfig+0x148>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff f8f7 	bl	800472c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800553e:	2303      	movs	r3, #3
 8005540:	73fb      	strb	r3, [r7, #15]
      break;
 8005542:	bf00      	nop
  }

  return ret;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200001bc 	.word	0x200001bc

08005554 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d004      	beq.n	8005570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8cd 	bl	8005708 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800556e:	e023      	b.n	80055b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	dc02      	bgt.n	8005582 <USBD_GetConfig+0x2e>
 800557c:	2b00      	cmp	r3, #0
 800557e:	dc03      	bgt.n	8005588 <USBD_GetConfig+0x34>
 8005580:	e015      	b.n	80055ae <USBD_GetConfig+0x5a>
 8005582:	2b03      	cmp	r3, #3
 8005584:	d00b      	beq.n	800559e <USBD_GetConfig+0x4a>
 8005586:	e012      	b.n	80055ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3308      	adds	r3, #8
 8005592:	2201      	movs	r2, #1
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f927 	bl	80057ea <USBD_CtlSendData>
        break;
 800559c:	e00c      	b.n	80055b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	2201      	movs	r2, #1
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f91f 	bl	80057ea <USBD_CtlSendData>
        break;
 80055ac:	e004      	b.n	80055b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8a9 	bl	8005708 <USBD_CtlError>
        break;
 80055b6:	bf00      	nop
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d81e      	bhi.n	8005616 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	88db      	ldrh	r3, [r3, #6]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d004      	beq.n	80055ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f890 	bl	8005708 <USBD_CtlError>
        break;
 80055e8:	e01a      	b.n	8005620 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	330c      	adds	r3, #12
 800560a:	2202      	movs	r2, #2
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8eb 	bl	80057ea <USBD_CtlSendData>
      break;
 8005614:	e004      	b.n	8005620 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f875 	bl	8005708 <USBD_CtlError>
      break;
 800561e:	bf00      	nop
  }
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	885b      	ldrh	r3, [r3, #2]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d106      	bne.n	8005648 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f92b 	bl	800589e <USBD_CtlSendStatus>
  }
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005660:	b2db      	uxtb	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	2b02      	cmp	r3, #2
 8005666:	d80b      	bhi.n	8005680 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	885b      	ldrh	r3, [r3, #2]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10c      	bne.n	800568a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f910 	bl	800589e <USBD_CtlSendStatus>
      }
      break;
 800567e:	e004      	b.n	800568a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f840 	bl	8005708 <USBD_CtlError>
      break;
 8005688:	e000      	b.n	800568c <USBD_ClrFeature+0x3c>
      break;
 800568a:	bf00      	nop
  }
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fabb 	bl	8004c3a <SWAPBYTE>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff faae 	bl	8004c3a <SWAPBYTE>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff faa1 	bl	8004c3a <SWAPBYTE>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	80da      	strh	r2, [r3, #6]
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fce1 	bl	80060dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800571a:	2100      	movs	r1, #0
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fcdd 	bl	80060dc <USBD_LL_StallEP>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d036      	beq.n	80057ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f000 f836 	bl	80057b6 <USBD_GetLen>
 800574a:	4603      	mov	r3, r0
 800574c:	3301      	adds	r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	701a      	strb	r2, [r3, #0]
  idx++;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	3301      	adds	r3, #1
 8005768:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4413      	add	r3, r2
 8005770:	2203      	movs	r2, #3
 8005772:	701a      	strb	r2, [r3, #0]
  idx++;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	3301      	adds	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800577a:	e013      	b.n	80057a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	3301      	adds	r3, #1
 800578c:	613b      	str	r3, [r7, #16]
    idx++;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	3301      	adds	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
    idx++;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	3301      	adds	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e7      	bne.n	800577c <USBD_GetString+0x52>
 80057ac:	e000      	b.n	80057b0 <USBD_GetString+0x86>
    return;
 80057ae:	bf00      	nop
  }
}
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80057c6:	e005      	b.n	80057d4 <USBD_GetLen+0x1e>
  {
    len++;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	3301      	adds	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <USBD_GetLen+0x12>
  }

  return len;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	2100      	movs	r1, #0
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fcec 	bl	80061ee <USBD_LL_Transmit>

  return USBD_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	2100      	movs	r1, #0
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fcdb 	bl	80061ee <USBD_LL_Transmit>

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2203      	movs	r2, #3
 8005852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	2100      	movs	r1, #0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fcdf 	bl	8006230 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	2100      	movs	r1, #0
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 fcce 	bl	8006230 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80058ae:	2300      	movs	r3, #0
 80058b0:	2200      	movs	r2, #0
 80058b2:	2100      	movs	r1, #0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fc9a 	bl	80061ee <USBD_LL_Transmit>

  return USBD_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2205      	movs	r2, #5
 80058d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058d4:	2300      	movs	r3, #0
 80058d6:	2200      	movs	r2, #0
 80058d8:	2100      	movs	r1, #0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fca8 	bl	8006230 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80058f0:	2200      	movs	r2, #0
 80058f2:	4912      	ldr	r1, [pc, #72]	; (800593c <MX_USB_DEVICE_Init+0x50>)
 80058f4:	4812      	ldr	r0, [pc, #72]	; (8005940 <MX_USB_DEVICE_Init+0x54>)
 80058f6:	f7fe fe8f 	bl	8004618 <USBD_Init>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005900:	f7fa fe8c 	bl	800061c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005904:	490f      	ldr	r1, [pc, #60]	; (8005944 <MX_USB_DEVICE_Init+0x58>)
 8005906:	480e      	ldr	r0, [pc, #56]	; (8005940 <MX_USB_DEVICE_Init+0x54>)
 8005908:	f7fe feb6 	bl	8004678 <USBD_RegisterClass>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005912:	f7fa fe83 	bl	800061c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005916:	490c      	ldr	r1, [pc, #48]	; (8005948 <MX_USB_DEVICE_Init+0x5c>)
 8005918:	4809      	ldr	r0, [pc, #36]	; (8005940 <MX_USB_DEVICE_Init+0x54>)
 800591a:	f7fe fdd7 	bl	80044cc <USBD_CDC_RegisterInterface>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005924:	f7fa fe7a 	bl	800061c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005928:	4805      	ldr	r0, [pc, #20]	; (8005940 <MX_USB_DEVICE_Init+0x54>)
 800592a:	f7fe fecc 	bl	80046c6 <USBD_Start>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005934:	f7fa fe72 	bl	800061c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005938:	bf00      	nop
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000150 	.word	0x20000150
 8005940:	200003e4 	.word	0x200003e4
 8005944:	20000038 	.word	0x20000038
 8005948:	2000013c 	.word	0x2000013c

0800594c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005950:	2200      	movs	r2, #0
 8005952:	4905      	ldr	r1, [pc, #20]	; (8005968 <CDC_Init_FS+0x1c>)
 8005954:	4805      	ldr	r0, [pc, #20]	; (800596c <CDC_Init_FS+0x20>)
 8005956:	f7fe fdce 	bl	80044f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800595a:	4905      	ldr	r1, [pc, #20]	; (8005970 <CDC_Init_FS+0x24>)
 800595c:	4803      	ldr	r0, [pc, #12]	; (800596c <CDC_Init_FS+0x20>)
 800595e:	f7fe fde8 	bl	8004532 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005962:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005964:	4618      	mov	r0, r3
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000eb4 	.word	0x20000eb4
 800596c:	200003e4 	.word	0x200003e4
 8005970:	200006b4 	.word	0x200006b4

08005974 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005978:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	6039      	str	r1, [r7, #0]
 800598e:	71fb      	strb	r3, [r7, #7]
 8005990:	4613      	mov	r3, r2
 8005992:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b23      	cmp	r3, #35	; 0x23
 8005998:	d84a      	bhi.n	8005a30 <CDC_Control_FS+0xac>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <CDC_Control_FS+0x1c>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	08005a31 	.word	0x08005a31
 80059a4:	08005a31 	.word	0x08005a31
 80059a8:	08005a31 	.word	0x08005a31
 80059ac:	08005a31 	.word	0x08005a31
 80059b0:	08005a31 	.word	0x08005a31
 80059b4:	08005a31 	.word	0x08005a31
 80059b8:	08005a31 	.word	0x08005a31
 80059bc:	08005a31 	.word	0x08005a31
 80059c0:	08005a31 	.word	0x08005a31
 80059c4:	08005a31 	.word	0x08005a31
 80059c8:	08005a31 	.word	0x08005a31
 80059cc:	08005a31 	.word	0x08005a31
 80059d0:	08005a31 	.word	0x08005a31
 80059d4:	08005a31 	.word	0x08005a31
 80059d8:	08005a31 	.word	0x08005a31
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	08005a31 	.word	0x08005a31
 80059e4:	08005a31 	.word	0x08005a31
 80059e8:	08005a31 	.word	0x08005a31
 80059ec:	08005a31 	.word	0x08005a31
 80059f0:	08005a31 	.word	0x08005a31
 80059f4:	08005a31 	.word	0x08005a31
 80059f8:	08005a31 	.word	0x08005a31
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a31 	.word	0x08005a31
 8005a14:	08005a31 	.word	0x08005a31
 8005a18:	08005a31 	.word	0x08005a31
 8005a1c:	08005a31 	.word	0x08005a31
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a31 	.word	0x08005a31
 8005a28:	08005a31 	.word	0x08005a31
 8005a2c:	08005a31 	.word	0x08005a31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005a30:	bf00      	nop
  }

  return (USBD_OK);
 8005a32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	4805      	ldr	r0, [pc, #20]	; (8005a64 <CDC_Receive_FS+0x24>)
 8005a4e:	f7fe fd70 	bl	8004532 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005a52:	4804      	ldr	r0, [pc, #16]	; (8005a64 <CDC_Receive_FS+0x24>)
 8005a54:	f7fe fdb6 	bl	80045c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005a58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200003e4 	.word	0x200003e4

08005a68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <CDC_Transmit_FS+0x48>)
 8005a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e00b      	b.n	8005aa6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4806      	ldr	r0, [pc, #24]	; (8005ab0 <CDC_Transmit_FS+0x48>)
 8005a96:	f7fe fd2e 	bl	80044f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005a9a:	4805      	ldr	r0, [pc, #20]	; (8005ab0 <CDC_Transmit_FS+0x48>)
 8005a9c:	f7fe fd62 	bl	8004564 <USBD_CDC_TransmitPacket>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200003e4 	.word	0x200003e4

08005ab4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	6039      	str	r1, [r7, #0]
 8005ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2212      	movs	r2, #18
 8005ae8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005aea:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	2000016c 	.word	0x2000016c

08005afc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	6039      	str	r1, [r7, #0]
 8005b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005b0e:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20000180 	.word	0x20000180

08005b20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d105      	bne.n	8005b3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	4907      	ldr	r1, [pc, #28]	; (8005b54 <USBD_FS_ProductStrDescriptor+0x34>)
 8005b36:	4808      	ldr	r0, [pc, #32]	; (8005b58 <USBD_FS_ProductStrDescriptor+0x38>)
 8005b38:	f7ff fdf7 	bl	800572a <USBD_GetString>
 8005b3c:	e004      	b.n	8005b48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	4904      	ldr	r1, [pc, #16]	; (8005b54 <USBD_FS_ProductStrDescriptor+0x34>)
 8005b42:	4805      	ldr	r0, [pc, #20]	; (8005b58 <USBD_FS_ProductStrDescriptor+0x38>)
 8005b44:	f7ff fdf1 	bl	800572a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b48:	4b02      	ldr	r3, [pc, #8]	; (8005b54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200016b4 	.word	0x200016b4
 8005b58:	08006390 	.word	0x08006390

08005b5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	4904      	ldr	r1, [pc, #16]	; (8005b7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005b6c:	4804      	ldr	r0, [pc, #16]	; (8005b80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005b6e:	f7ff fddc 	bl	800572a <USBD_GetString>
  return USBD_StrDesc;
 8005b72:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	200016b4 	.word	0x200016b4
 8005b80:	080063a8 	.word	0x080063a8

08005b84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	221a      	movs	r2, #26
 8005b94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005b96:	f000 f843 	bl	8005c20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005b9a:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000184 	.word	0x20000184

08005ba8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	4907      	ldr	r1, [pc, #28]	; (8005bdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005bbe:	4808      	ldr	r0, [pc, #32]	; (8005be0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005bc0:	f7ff fdb3 	bl	800572a <USBD_GetString>
 8005bc4:	e004      	b.n	8005bd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8005bca:	4805      	ldr	r0, [pc, #20]	; (8005be0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005bcc:	f7ff fdad 	bl	800572a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	200016b4 	.word	0x200016b4
 8005be0:	080063bc 	.word	0x080063bc

08005be4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	6039      	str	r1, [r7, #0]
 8005bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4907      	ldr	r1, [pc, #28]	; (8005c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005bfa:	4808      	ldr	r0, [pc, #32]	; (8005c1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005bfc:	f7ff fd95 	bl	800572a <USBD_GetString>
 8005c00:	e004      	b.n	8005c0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c06:	4805      	ldr	r0, [pc, #20]	; (8005c1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c08:	f7ff fd8f 	bl	800572a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c0c:	4b02      	ldr	r3, [pc, #8]	; (8005c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	200016b4 	.word	0x200016b4
 8005c1c:	080063c8 	.word	0x080063c8

08005c20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005c26:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <Get_SerialNum+0x44>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <Get_SerialNum+0x48>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005c32:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <Get_SerialNum+0x4c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005c46:	2208      	movs	r2, #8
 8005c48:	4909      	ldr	r1, [pc, #36]	; (8005c70 <Get_SerialNum+0x50>)
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f814 	bl	8005c78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005c50:	2204      	movs	r2, #4
 8005c52:	4908      	ldr	r1, [pc, #32]	; (8005c74 <Get_SerialNum+0x54>)
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f000 f80f 	bl	8005c78 <IntToUnicode>
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	1fff7a10 	.word	0x1fff7a10
 8005c68:	1fff7a14 	.word	0x1fff7a14
 8005c6c:	1fff7a18 	.word	0x1fff7a18
 8005c70:	20000186 	.word	0x20000186
 8005c74:	20000196 	.word	0x20000196

08005c78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	75fb      	strb	r3, [r7, #23]
 8005c8e:	e027      	b.n	8005ce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	0f1b      	lsrs	r3, r3, #28
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	d80b      	bhi.n	8005cb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	0f1b      	lsrs	r3, r3, #28
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	440b      	add	r3, r1
 8005ca8:	3230      	adds	r2, #48	; 0x30
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	e00a      	b.n	8005cc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	0f1b      	lsrs	r3, r3, #28
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	4619      	mov	r1, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3237      	adds	r2, #55	; 0x37
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
 8005ce0:	7dfa      	ldrb	r2, [r7, #23]
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3d3      	bcc.n	8005c90 <IntToUnicode+0x18>
  }
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	609a      	str	r2, [r3, #8]
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d18:	d13a      	bne.n	8005d90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	4b1e      	ldr	r3, [pc, #120]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6313      	str	r3, [r2, #48]	; 0x30
 8005d2a:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005d36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d44:	2303      	movs	r3, #3
 8005d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005d48:	230a      	movs	r3, #10
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4619      	mov	r1, r3
 8005d52:	4812      	ldr	r0, [pc, #72]	; (8005d9c <HAL_PCD_MspInit+0xa4>)
 8005d54:	f7fa fea8 	bl	8000aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005d58:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	4a0e      	ldr	r2, [pc, #56]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d62:	6353      	str	r3, [r2, #52]	; 0x34
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d72:	6453      	str	r3, [r2, #68]	; 0x44
 8005d74:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <HAL_PCD_MspInit+0xa0>)
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005d80:	2200      	movs	r2, #0
 8005d82:	2100      	movs	r1, #0
 8005d84:	2043      	movs	r0, #67	; 0x43
 8005d86:	f7fa fe58 	bl	8000a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005d8a:	2043      	movs	r0, #67	; 0x43
 8005d8c:	f7fa fe71 	bl	8000a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005d90:	bf00      	nop
 8005d92:	3728      	adds	r7, #40	; 0x28
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40020000 	.word	0x40020000

08005da0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe fcd0 	bl	800475c <USBD_LL_SetupStage>
}
 8005dbc:	bf00      	nop
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	4619      	mov	r1, r3
 8005dee:	f7fe fd0a 	bl	8004806 <USBD_LL_DataOutStage>
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	3348      	adds	r3, #72	; 0x48
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	4619      	mov	r1, r3
 8005e22:	f7fe fd53 	bl	80048cc <USBD_LL_DataInStage>
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b082      	sub	sp, #8
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe fe67 	bl	8004b10 <USBD_LL_SOF>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
 8005e62:	e008      	b.n	8005e76 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d102      	bne.n	8005e72 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
 8005e70:	e001      	b.n	8005e76 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005e72:	f7fa fbd3 	bl	800061c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e7c:	7bfa      	ldrb	r2, [r7, #15]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fe fe07 	bl	8004a94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fe fdb3 	bl	80049f8 <USBD_LL_Reset>
}
 8005e92:	bf00      	nop
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fe02 	bl	8004ab4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ed0:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <HAL_PCD_SuspendCallback+0x48>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	4a03      	ldr	r2, [pc, #12]	; (8005ee4 <HAL_PCD_SuspendCallback+0x48>)
 8005ed6:	f043 0306 	orr.w	r3, r3, #6
 8005eda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005edc:	bf00      	nop
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	e000ed00 	.word	0xe000ed00

08005ee8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fdf2 	bl	8004ae0 <USBD_LL_Resume>
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fe40 	bl	8004ba0 <USBD_LL_IsoOUTIncomplete>
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f3a:	78fa      	ldrb	r2, [r7, #3]
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fe08 	bl	8004b54 <USBD_LL_IsoINIncomplete>
}
 8005f44:	bf00      	nop
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fe46 	bl	8004bec <USBD_LL_DevConnected>
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fe43 	bl	8004c02 <USBD_LL_DevDisconnected>
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d13c      	bne.n	800600e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005f94:	4a20      	ldr	r2, [pc, #128]	; (8006018 <USBD_LL_Init+0x94>)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <USBD_LL_Init+0x94>)
 8005fa0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005fa4:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <USBD_LL_Init+0x94>)
 8005fa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005faa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005fac:	4b1a      	ldr	r3, [pc, #104]	; (8006018 <USBD_LL_Init+0x94>)
 8005fae:	2204      	movs	r2, #4
 8005fb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005fb2:	4b19      	ldr	r3, [pc, #100]	; (8006018 <USBD_LL_Init+0x94>)
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <USBD_LL_Init+0x94>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005fbe:	4b16      	ldr	r3, [pc, #88]	; (8006018 <USBD_LL_Init+0x94>)
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005fc4:	4b14      	ldr	r3, [pc, #80]	; (8006018 <USBD_LL_Init+0x94>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005fca:	4b13      	ldr	r3, [pc, #76]	; (8006018 <USBD_LL_Init+0x94>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005fd0:	4b11      	ldr	r3, [pc, #68]	; (8006018 <USBD_LL_Init+0x94>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <USBD_LL_Init+0x94>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005fdc:	4b0e      	ldr	r3, [pc, #56]	; (8006018 <USBD_LL_Init+0x94>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005fe2:	480d      	ldr	r0, [pc, #52]	; (8006018 <USBD_LL_Init+0x94>)
 8005fe4:	f7fa fefc 	bl	8000de0 <HAL_PCD_Init>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005fee:	f7fa fb15 	bl	800061c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005ff2:	2180      	movs	r1, #128	; 0x80
 8005ff4:	4808      	ldr	r0, [pc, #32]	; (8006018 <USBD_LL_Init+0x94>)
 8005ff6:	f7fc f85a 	bl	80020ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005ffa:	2240      	movs	r2, #64	; 0x40
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4806      	ldr	r0, [pc, #24]	; (8006018 <USBD_LL_Init+0x94>)
 8006000:	f7fc f80e 	bl	8002020 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006004:	2280      	movs	r2, #128	; 0x80
 8006006:	2101      	movs	r1, #1
 8006008:	4803      	ldr	r0, [pc, #12]	; (8006018 <USBD_LL_Init+0x94>)
 800600a:	f7fc f809 	bl	8002020 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	200018b4 	.word	0x200018b4

0800601c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006032:	4618      	mov	r0, r3
 8006034:	f7fa fff1 	bl	800101a <HAL_PCD_Start>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f942 	bl	80062c8 <USBD_Get_USB_Status>
 8006044:	4603      	mov	r3, r0
 8006046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006048:	7bbb      	ldrb	r3, [r7, #14]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	4608      	mov	r0, r1
 800605c:	4611      	mov	r1, r2
 800605e:	461a      	mov	r2, r3
 8006060:	4603      	mov	r3, r0
 8006062:	70fb      	strb	r3, [r7, #3]
 8006064:	460b      	mov	r3, r1
 8006066:	70bb      	strb	r3, [r7, #2]
 8006068:	4613      	mov	r3, r2
 800606a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800606c:	2300      	movs	r3, #0
 800606e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800607a:	78bb      	ldrb	r3, [r7, #2]
 800607c:	883a      	ldrh	r2, [r7, #0]
 800607e:	78f9      	ldrb	r1, [r7, #3]
 8006080:	f7fb fbd5 	bl	800182e <HAL_PCD_EP_Open>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f91c 	bl	80062c8 <USBD_Get_USB_Status>
 8006090:	4603      	mov	r3, r0
 8006092:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006094:	7bbb      	ldrb	r3, [r7, #14]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fb fc1e 	bl	80018fe <HAL_PCD_EP_Close>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f8fd 	bl	80062c8 <USBD_Get_USB_Status>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	4611      	mov	r1, r2
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fb fcf6 	bl	8001aec <HAL_PCD_EP_SetStall>
 8006100:	4603      	mov	r3, r0
 8006102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	4618      	mov	r0, r3
 8006108:	f000 f8de 	bl	80062c8 <USBD_Get_USB_Status>
 800610c:	4603      	mov	r3, r0
 800610e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006110:	7bbb      	ldrb	r3, [r7, #14]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f7fb fd3b 	bl	8001bb4 <HAL_PCD_EP_ClrStall>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 f8bf 	bl	80062c8 <USBD_Get_USB_Status>
 800614a:	4603      	mov	r3, r0
 800614c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800614e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800616a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800616c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006170:	2b00      	cmp	r3, #0
 8006172:	da0b      	bge.n	800618c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	4613      	mov	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	333e      	adds	r3, #62	; 0x3e
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	e00b      	b.n	80061a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006192:	68f9      	ldr	r1, [r7, #12]
 8006194:	4613      	mov	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80061a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	4611      	mov	r1, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fb fb08 	bl	80017e4 <HAL_PCD_SetAddress>
 80061d4:	4603      	mov	r3, r0
 80061d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 f874 	bl	80062c8 <USBD_Get_USB_Status>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	460b      	mov	r3, r1
 80061fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800620c:	7af9      	ldrb	r1, [r7, #11]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	f7fb fc21 	bl	8001a58 <HAL_PCD_EP_Transmit>
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 f853 	bl	80062c8 <USBD_Get_USB_Status>
 8006222:	4603      	mov	r3, r0
 8006224:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006226:	7dbb      	ldrb	r3, [r7, #22]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	460b      	mov	r3, r1
 800623e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800624e:	7af9      	ldrb	r1, [r7, #11]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	f7fb fb9d 	bl	8001992 <HAL_PCD_EP_Receive>
 8006258:	4603      	mov	r3, r0
 800625a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f832 	bl	80062c8 <USBD_Get_USB_Status>
 8006264:	4603      	mov	r3, r0
 8006266:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006268:	7dbb      	ldrb	r3, [r7, #22]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7fb fbcd 	bl	8001a28 <HAL_PCD_EP_GetRxCount>
 800628e:	4603      	mov	r3, r0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <USBD_static_malloc+0x18>)
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	200001c0 	.word	0x200001c0

080062b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80062d6:	79fb      	ldrb	r3, [r7, #7]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d817      	bhi.n	800630c <USBD_Get_USB_Status+0x44>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <USBD_Get_USB_Status+0x1c>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	080062fb 	.word	0x080062fb
 80062ec:	08006301 	.word	0x08006301
 80062f0:	08006307 	.word	0x08006307
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
    break;
 80062f8:	e00b      	b.n	8006312 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80062fa:	2303      	movs	r3, #3
 80062fc:	73fb      	strb	r3, [r7, #15]
    break;
 80062fe:	e008      	b.n	8006312 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]
    break;
 8006304:	e005      	b.n	8006312 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	73fb      	strb	r3, [r7, #15]
    break;
 800630a:	e002      	b.n	8006312 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800630c:	2303      	movs	r3, #3
 800630e:	73fb      	strb	r3, [r7, #15]
    break;
 8006310:	bf00      	nop
  }
  return usb_status;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f000 f820 	bl	8006378 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	080063f0 	.word	0x080063f0
 800635c:	080063f0 	.word	0x080063f0
 8006360:	080063f0 	.word	0x080063f0
 8006364:	080063f4 	.word	0x080063f4

08006368 <memset>:
 8006368:	4402      	add	r2, r0
 800636a:	4603      	mov	r3, r0
 800636c:	4293      	cmp	r3, r2
 800636e:	d100      	bne.n	8006372 <memset+0xa>
 8006370:	4770      	bx	lr
 8006372:	f803 1b01 	strb.w	r1, [r3], #1
 8006376:	e7f9      	b.n	800636c <memset+0x4>

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
