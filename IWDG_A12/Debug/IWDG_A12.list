
IWDG_A12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800226c  0800226c  0001226c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800227c  0800227c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800227c  0800227c  0001227c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002284  08002284  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002284  08002284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002288  08002288  00012288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800228c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002298  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002298  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009552  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001692  00000000  00000000  0002958e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002ac20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fcbd  00000000  00000000  0002be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a368  00000000  00000000  0004bb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4492  00000000  00000000  00055e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a31f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002728  00000000  00000000  0011a374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002254 	.word	0x08002254

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002254 	.word	0x08002254

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa26 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f832 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8f6 	bl	80006bc <MX_GPIO_Init>
  MX_IWDG_Init();
 80004d0:	f000 f88e 	bl	80005f0 <MX_IWDG_Init>
  MX_TIM2_Init();
 80004d4:	f000 f8a6 	bl	8000624 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,SET); // For Showing System Reset
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004de:	4810      	ldr	r0, [pc, #64]	; (8000520 <main+0x60>)
 80004e0:	f000 fd74 	bl	8000fcc <HAL_GPIO_WritePin>
  HAL_Delay(2500);
 80004e4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80004e8:	f000 fa86 	bl	80009f8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <main+0x64>)
 80004ee:	f001 fa57 	bl	80019a0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x60>)
 80004fa:	f000 fd67 	bl	8000fcc <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 80004fe:	2101      	movs	r1, #1
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x68>)
 8000502:	f000 fd4b 	bl	8000f9c <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f8      	beq.n	80004fe <main+0x3e>
	  	  	  {
	  	  		  HAL_IWDG_Refresh(&hiwdg);
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x6c>)
 800050e:	f000 fdd2 	bl	80010b6 <HAL_IWDG_Refresh>
	  	  		  HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_13); //WatchDog Refresh LED
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x60>)
 8000518:	f000 fd71 	bl	8000ffe <HAL_GPIO_TogglePin>
	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0))
 800051c:	e7ef      	b.n	80004fe <main+0x3e>
 800051e:	bf00      	nop
 8000520:	40020c00 	.word	0x40020c00
 8000524:	20000038 	.word	0x20000038
 8000528:	40020000 	.word	0x40020000
 800052c:	2000002c 	.word	0x2000002c

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fe80 	bl	8002244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <SystemClock_Config+0xb8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <SystemClock_Config+0xb8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <SystemClock_Config+0xb8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <SystemClock_Config+0xbc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <SystemClock_Config+0xbc>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800058c:	230a      	movs	r3, #10
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fd97 	bl	80010d8 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b0:	f000 f8ec 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fffa 	bl	80015c8 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005da:	f000 f8d7 	bl	800078c <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_IWDG_Init+0x2c>)
 80005f6:	4a0a      	ldr	r2, [pc, #40]	; (8000620 <MX_IWDG_Init+0x30>)
 80005f8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_IWDG_Init+0x2c>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_IWDG_Init+0x2c>)
 8000602:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000606:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_IWDG_Init+0x2c>)
 800060a:	f000 fd12 	bl	8001032 <HAL_IWDG_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000614:	f000 f8ba 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000002c 	.word	0x2000002c
 8000620:	40003000 	.word	0x40003000

08000624 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	463b      	mov	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_TIM2_Init+0x94>)
 8000642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000646:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_TIM2_Init+0x94>)
 800064a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800064e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_TIM2_Init+0x94>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <MX_TIM2_Init+0x94>)
 8000658:	2232      	movs	r2, #50	; 0x32
 800065a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_TIM2_Init+0x94>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <MX_TIM2_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000668:	4813      	ldr	r0, [pc, #76]	; (80006b8 <MX_TIM2_Init+0x94>)
 800066a:	f001 f949 	bl	8001900 <HAL_TIM_Base_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000674:	f000 f88a 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <MX_TIM2_Init+0x94>)
 8000686:	f001 fb03 	bl	8001c90 <HAL_TIM_ConfigClockSource>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 f87c 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000694:	2320      	movs	r3, #32
 8000696:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_TIM2_Init+0x94>)
 80006a2:	f001 fd1b 	bl	80020dc <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006ac:	f000 f86e 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000038 	.word	0x20000038

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_GPIO_Init+0x98>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <MX_GPIO_Init+0x98>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_GPIO_Init+0x98>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0x98>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0x98>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_GPIO_Init+0x9c>)
 8000712:	f000 fc5b 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000716:	2301      	movs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0xa0>)
 800072a:	f000 fa9b 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800072e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0x9c>)
 8000748:	f000 fa8c 	bl	8000c64 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40020000 	.word	0x40020000

08000760 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);// Just for Counting , to show something is running
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800076e:	f000 fc46 	bl	8000ffe <HAL_GPIO_TogglePin>
	counter++;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	4a03      	ldr	r2, [pc, #12]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020c00 	.word	0x40020c00
 8000788:	20000028 	.word	0x20000028

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007f8:	d115      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_TIM_Base_MspInit+0x48>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_TIM_Base_MspInit+0x48>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_TIM_Base_MspInit+0x48>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	201c      	movs	r0, #28
 800081c:	f000 f9eb 	bl	8000bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000820:	201c      	movs	r0, #28
 8000822:	f000 fa04 	bl	8000c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f89a 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM2_IRQHandler+0x10>)
 800088e:	f001 f8f7 	bl	8001a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000038 	.word	0x20000038

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008dc:	4c0b      	ldr	r4, [pc, #44]	; (800090c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ea:	f7ff ffd7 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f001 fc85 	bl	80021fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fde5 	bl	80004c0 <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	0800228c 	.word	0x0800228c
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000084 	.word	0x20000084

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f94f 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff26 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f967 	bl	8000c4a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f000 f92f 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000080 	.word	0x20000080

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000080 	.word	0x20000080

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff3e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff31 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e16b      	b.n	8000f58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 815a 	bne.w	8000f52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d005      	beq.n	8000cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d017      	beq.n	8000d54 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80b4 	beq.w	8000f52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b60      	ldr	r3, [pc, #384]	; (8000f70 <HAL_GPIO_Init+0x30c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a5f      	ldr	r2, [pc, #380]	; (8000f70 <HAL_GPIO_Init+0x30c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <HAL_GPIO_Init+0x30c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e06:	4a5b      	ldr	r2, [pc, #364]	; (8000f74 <HAL_GPIO_Init+0x310>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a52      	ldr	r2, [pc, #328]	; (8000f78 <HAL_GPIO_Init+0x314>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d02b      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a51      	ldr	r2, [pc, #324]	; (8000f7c <HAL_GPIO_Init+0x318>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d025      	beq.n	8000e86 <HAL_GPIO_Init+0x222>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a50      	ldr	r2, [pc, #320]	; (8000f80 <HAL_GPIO_Init+0x31c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d01f      	beq.n	8000e82 <HAL_GPIO_Init+0x21e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_GPIO_Init+0x320>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d019      	beq.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_GPIO_Init+0x324>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0x216>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_GPIO_Init+0x328>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d00d      	beq.n	8000e76 <HAL_GPIO_Init+0x212>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_GPIO_Init+0x32c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d007      	beq.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_GPIO_Init+0x330>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d101      	bne.n	8000e6e <HAL_GPIO_Init+0x20a>
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	e00e      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e6e:	2308      	movs	r3, #8
 8000e70:	e00c      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e72:	2306      	movs	r3, #6
 8000e74:	e00a      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e76:	2305      	movs	r3, #5
 8000e78:	e008      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e006      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e004      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <HAL_GPIO_Init+0x228>
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	f002 0203 	and.w	r2, r2, #3
 8000e92:	0092      	lsls	r2, r2, #2
 8000e94:	4093      	lsls	r3, r2
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9c:	4935      	ldr	r1, [pc, #212]	; (8000f74 <HAL_GPIO_Init+0x310>)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ece:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef8:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_GPIO_Init+0x334>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	f67f ae90 	bls.w	8000c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40021400 	.word	0x40021400
 8000f90:	40021800 	.word	0x40021800
 8000f94:	40021c00 	.word	0x40021c00
 8000f98:	40013c00 	.word	0x40013c00

08000f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
 8000fb8:	e001      	b.n	8000fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	807b      	strh	r3, [r7, #2]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fdc:	787b      	ldrb	r3, [r7, #1]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe2:	887a      	ldrh	r2, [r7, #2]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe8:	e003      	b.n	8000ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	041a      	lsls	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	619a      	str	r2, [r3, #24]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001010:	887a      	ldrh	r2, [r7, #2]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	041a      	lsls	r2, r3, #16
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43d9      	mvns	r1, r3
 800101c:	887b      	ldrh	r3, [r7, #2]
 800101e:	400b      	ands	r3, r1
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	619a      	str	r2, [r3, #24]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e034      	b.n	80010ae <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800104c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f245 5255 	movw	r2, #21845	; 0x5555
 8001056:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	6852      	ldr	r2, [r2, #4]
 8001060:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6892      	ldr	r2, [r2, #8]
 800106a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800106c:	f7ff fcb8 	bl	80009e0 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001072:	e00f      	b.n	8001094 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001074:	f7ff fcb4 	bl	80009e0 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b30      	cmp	r3, #48	; 0x30
 8001080:	d908      	bls.n	8001094 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e00c      	b.n	80010ae <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1e8      	bne.n	8001074 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80010aa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80010c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e264      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d075      	beq.n	80011e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f6:	4ba3      	ldr	r3, [pc, #652]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d00c      	beq.n	800111c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	4ba0      	ldr	r3, [pc, #640]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110a:	2b08      	cmp	r3, #8
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800110e:	4b9d      	ldr	r3, [pc, #628]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4b99      	ldr	r3, [pc, #612]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d05b      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d157      	bne.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e23f      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x74>
 800113e:	4b91      	ldr	r3, [pc, #580]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a90      	ldr	r2, [pc, #576]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b8b      	ldr	r3, [pc, #556]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a8a      	ldr	r2, [pc, #552]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b88      	ldr	r3, [pc, #544]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a87      	ldr	r2, [pc, #540]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 8001170:	4b84      	ldr	r3, [pc, #528]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a83      	ldr	r2, [pc, #524]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b81      	ldr	r3, [pc, #516]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a80      	ldr	r2, [pc, #512]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fc26 	bl	80009e0 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fc22 	bl	80009e0 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e204      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0xc0>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc12 	bl	80009e0 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fc0e 	bl	80009e0 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e1f0      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d063      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ee:	4b65      	ldr	r3, [pc, #404]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fa:	4b62      	ldr	r3, [pc, #392]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001202:	2b08      	cmp	r3, #8
 8001204:	d11c      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001206:	4b5f      	ldr	r3, [pc, #380]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b5c      	ldr	r3, [pc, #368]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d001      	beq.n	800122a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e1c4      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122a:	4b56      	ldr	r3, [pc, #344]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4952      	ldr	r1, [pc, #328]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	4313      	orrs	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e03a      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d020      	beq.n	800128a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <HAL_RCC_OscConfig+0x2b0>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fbc7 	bl	80009e0 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001256:	f7ff fbc3 	bl	80009e0 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1a5      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d0f0      	beq.n	8001256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4940      	ldr	r1, [pc, #256]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e015      	b.n	80012b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <HAL_RCC_OscConfig+0x2b0>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001290:	f7ff fba6 	bl	80009e0 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001298:	f7ff fba2 	bl	80009e0 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e184      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d030      	beq.n	8001324 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d016      	beq.n	80012f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_RCC_OscConfig+0x2b4>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d0:	f7ff fb86 	bl	80009e0 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fb82 	bl	80009e0 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e164      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x200>
 80012f6:	e015      	b.n	8001324 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_RCC_OscConfig+0x2b4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fe:	f7ff fb6f 	bl	80009e0 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fb6b 	bl	80009e0 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e14d      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a0 	beq.w	8001472 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_OscConfig+0x2b8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d121      	bne.n	80013b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_RCC_OscConfig+0x2b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_RCC_OscConfig+0x2b8>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137a:	f7ff fb31 	bl	80009e0 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	e011      	b.n	80013a6 <HAL_RCC_OscConfig+0x2ce>
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	42470000 	.word	0x42470000
 800138c:	42470e80 	.word	0x42470e80
 8001390:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001394:	f7ff fb24 	bl	80009e0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e106      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	4b85      	ldr	r3, [pc, #532]	; (80015bc <HAL_RCC_OscConfig+0x4e4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d106      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2f0>
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6713      	str	r3, [r2, #112]	; 0x70
 80013c6:	e01c      	b.n	8001402 <HAL_RCC_OscConfig+0x32a>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d10c      	bne.n	80013ea <HAL_RCC_OscConfig+0x312>
 80013d0:	4b7b      	ldr	r3, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	4a7a      	ldr	r2, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6713      	str	r3, [r2, #112]	; 0x70
 80013dc:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70
 80013e8:	e00b      	b.n	8001402 <HAL_RCC_OscConfig+0x32a>
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a74      	ldr	r2, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a71      	ldr	r2, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80013fc:	f023 0304 	bic.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d015      	beq.n	8001436 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140a:	f7ff fae9 	bl	80009e0 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001412:	f7ff fae5 	bl	80009e0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001420:	4293      	cmp	r3, r2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0c5      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0ee      	beq.n	8001412 <HAL_RCC_OscConfig+0x33a>
 8001434:	e014      	b.n	8001460 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fad3 	bl	80009e0 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143e:	f7ff facf 	bl	80009e0 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f241 3288 	movw	r2, #5000	; 0x1388
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0af      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 8001456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ee      	bne.n	800143e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d105      	bne.n	8001472 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001466:	4b56      	ldr	r3, [pc, #344]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a55      	ldr	r2, [pc, #340]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 800146c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 809b 	beq.w	80015b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 030c 	and.w	r3, r3, #12
 8001484:	2b08      	cmp	r3, #8
 8001486:	d05c      	beq.n	8001542 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d141      	bne.n	8001514 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001490:	4b4c      	ldr	r3, [pc, #304]	; (80015c4 <HAL_RCC_OscConfig+0x4ec>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff faa3 	bl	80009e0 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff fa9f 	bl	80009e0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e081      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69da      	ldr	r2, [r3, #28]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	019b      	lsls	r3, r3, #6
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	085b      	lsrs	r3, r3, #1
 80014d4:	3b01      	subs	r3, #1
 80014d6:	041b      	lsls	r3, r3, #16
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	061b      	lsls	r3, r3, #24
 80014e0:	4937      	ldr	r1, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <HAL_RCC_OscConfig+0x4ec>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fa78 	bl	80009e0 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f4:	f7ff fa74 	bl	80009e0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e056      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x41c>
 8001512:	e04e      	b.n	80015b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <HAL_RCC_OscConfig+0x4ec>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa61 	bl	80009e0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001522:	f7ff fa5d 	bl	80009e0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e03f      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x44a>
 8001540:	e037      	b.n	80015b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e032      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800154e:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <HAL_RCC_OscConfig+0x4e8>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d028      	beq.n	80015ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d121      	bne.n	80015ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001574:	429a      	cmp	r2, r3
 8001576:	d11a      	bne.n	80015ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800157e:	4013      	ands	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001584:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001586:	4293      	cmp	r3, r2
 8001588:	d111      	bne.n	80015ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	3b01      	subs	r3, #1
 8001598:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159a:	429a      	cmp	r2, r3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40007000 	.word	0x40007000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	42470060 	.word	0x42470060

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff f992 	bl	80009e0 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff f98e 	bl	80009e0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f8f2 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	0800226c 	.word	0x0800226c
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800179a:	2100      	movs	r1, #0
 800179c:	6079      	str	r1, [r7, #4]
 800179e:	2100      	movs	r1, #0
 80017a0:	60f9      	str	r1, [r7, #12]
 80017a2:	2100      	movs	r1, #0
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017a6:	2100      	movs	r1, #0
 80017a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017aa:	4952      	ldr	r1, [pc, #328]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80017ac:	6889      	ldr	r1, [r1, #8]
 80017ae:	f001 010c 	and.w	r1, r1, #12
 80017b2:	2908      	cmp	r1, #8
 80017b4:	d00d      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80017b6:	2908      	cmp	r1, #8
 80017b8:	f200 8094 	bhi.w	80018e4 <HAL_RCC_GetSysClockFreq+0x150>
 80017bc:	2900      	cmp	r1, #0
 80017be:	d002      	beq.n	80017c6 <HAL_RCC_GetSysClockFreq+0x32>
 80017c0:	2904      	cmp	r1, #4
 80017c2:	d003      	beq.n	80017cc <HAL_RCC_GetSysClockFreq+0x38>
 80017c4:	e08e      	b.n	80018e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c6:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80017c8:	60bb      	str	r3, [r7, #8]
       break;
 80017ca:	e08e      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017cc:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_GetSysClockFreq+0x168>)
 80017ce:	60bb      	str	r3, [r7, #8]
      break;
 80017d0:	e08b      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d2:	4948      	ldr	r1, [pc, #288]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80017d4:	6849      	ldr	r1, [r1, #4]
 80017d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017dc:	4945      	ldr	r1, [pc, #276]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80017de:	6849      	ldr	r1, [r1, #4]
 80017e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017e4:	2900      	cmp	r1, #0
 80017e6:	d024      	beq.n	8001832 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e8:	4942      	ldr	r1, [pc, #264]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80017ea:	6849      	ldr	r1, [r1, #4]
 80017ec:	0989      	lsrs	r1, r1, #6
 80017ee:	4608      	mov	r0, r1
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80017f8:	f04f 0500 	mov.w	r5, #0
 80017fc:	ea00 0204 	and.w	r2, r0, r4
 8001800:	ea01 0305 	and.w	r3, r1, r5
 8001804:	493d      	ldr	r1, [pc, #244]	; (80018fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001806:	fb01 f003 	mul.w	r0, r1, r3
 800180a:	2100      	movs	r1, #0
 800180c:	fb01 f102 	mul.w	r1, r1, r2
 8001810:	1844      	adds	r4, r0, r1
 8001812:	493a      	ldr	r1, [pc, #232]	; (80018fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001814:	fba2 0101 	umull	r0, r1, r2, r1
 8001818:	1863      	adds	r3, r4, r1
 800181a:	4619      	mov	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	f7fe fcd0 	bl	80001c8 <__aeabi_uldivmod>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4613      	mov	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e04a      	b.n	80018c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	099b      	lsrs	r3, r3, #6
 8001838:	461a      	mov	r2, r3
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	ea02 0400 	and.w	r4, r2, r0
 800184a:	ea03 0501 	and.w	r5, r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	014b      	lsls	r3, r1, #5
 800185c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001860:	0142      	lsls	r2, r0, #5
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	1b00      	subs	r0, r0, r4
 8001868:	eb61 0105 	sbc.w	r1, r1, r5
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	018b      	lsls	r3, r1, #6
 8001876:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800187a:	0182      	lsls	r2, r0, #6
 800187c:	1a12      	subs	r2, r2, r0
 800187e:	eb63 0301 	sbc.w	r3, r3, r1
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	00d9      	lsls	r1, r3, #3
 800188c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001890:	00d0      	lsls	r0, r2, #3
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	1912      	adds	r2, r2, r4
 8001898:	eb45 0303 	adc.w	r3, r5, r3
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0299      	lsls	r1, r3, #10
 80018a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018aa:	0290      	lsls	r0, r2, #10
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	461a      	mov	r2, r3
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	f7fe fc84 	bl	80001c8 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	3301      	adds	r3, #1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e0:	60bb      	str	r3, [r7, #8]
      break;
 80018e2:	e002      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80018e6:	60bb      	str	r3, [r7, #8]
      break;
 80018e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ea:	68bb      	ldr	r3, [r7, #8]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bdb0      	pop	{r4, r5, r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	017d7840 	.word	0x017d7840

08001900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e041      	b.n	8001996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d106      	bne.n	800192c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7fe ff5e 	bl	80007e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f000 fa92 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d001      	beq.n	80019b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e04e      	b.n	8001a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d022      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e2:	d01d      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d018      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d013      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00e      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d009      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d004      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x80>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d111      	bne.n	8001a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d010      	beq.n	8001a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a42:	e007      	b.n	8001a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	40000c00 	.word	0x40000c00
 8001a74:	40010400 	.word	0x40010400
 8001a78:	40014000 	.word	0x40014000
 8001a7c:	40001800 	.word	0x40001800

08001a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d122      	bne.n	8001adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d11b      	bne.n	8001adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0202 	mvn.w	r2, #2
 8001aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f9b2 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f9a4 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f9b5 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b04      	cmp	r3, #4
 8001af6:	d11b      	bne.n	8001b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0204 	mvn.w	r2, #4
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f988 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f97a 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f98b 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0208 	mvn.w	r2, #8
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f95e 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f950 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f961 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b10      	cmp	r3, #16
 8001b90:	d122      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0210 	mvn.w	r2, #16
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2208      	movs	r2, #8
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f934 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f926 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f937 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0201 	mvn.w	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7fe fdae 	bl	8000760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b80      	cmp	r3, #128	; 0x80
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1c:	2b80      	cmp	r3, #128	; 0x80
 8001c1e:	d107      	bne.n	8001c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fadc 	bl	80021e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3a:	2b40      	cmp	r3, #64	; 0x40
 8001c3c:	d10e      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c48:	2b40      	cmp	r3, #64	; 0x40
 8001c4a:	d107      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8fc 	bl	8001e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d10e      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d107      	bne.n	8001c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0220 	mvn.w	r2, #32
 8001c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 faa6 	bl	80021d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_TIM_ConfigClockSource+0x18>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e0b3      	b.n	8001e10 <HAL_TIM_ConfigClockSource+0x180>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce0:	d03e      	beq.n	8001d60 <HAL_TIM_ConfigClockSource+0xd0>
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ce6:	f200 8087 	bhi.w	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cee:	f000 8085 	beq.w	8001dfc <HAL_TIM_ConfigClockSource+0x16c>
 8001cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf6:	d87f      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001cf8:	2b70      	cmp	r3, #112	; 0x70
 8001cfa:	d01a      	beq.n	8001d32 <HAL_TIM_ConfigClockSource+0xa2>
 8001cfc:	2b70      	cmp	r3, #112	; 0x70
 8001cfe:	d87b      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001d00:	2b60      	cmp	r3, #96	; 0x60
 8001d02:	d050      	beq.n	8001da6 <HAL_TIM_ConfigClockSource+0x116>
 8001d04:	2b60      	cmp	r3, #96	; 0x60
 8001d06:	d877      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001d08:	2b50      	cmp	r3, #80	; 0x50
 8001d0a:	d03c      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xf6>
 8001d0c:	2b50      	cmp	r3, #80	; 0x50
 8001d0e:	d873      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001d10:	2b40      	cmp	r3, #64	; 0x40
 8001d12:	d058      	beq.n	8001dc6 <HAL_TIM_ConfigClockSource+0x136>
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d86f      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001d18:	2b30      	cmp	r3, #48	; 0x30
 8001d1a:	d064      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0x156>
 8001d1c:	2b30      	cmp	r3, #48	; 0x30
 8001d1e:	d86b      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d060      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0x156>
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d867      	bhi.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05c      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0x156>
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d05a      	beq.n	8001de6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001d30:	e062      	b.n	8001df8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f000 f9ab 	bl	800209c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	609a      	str	r2, [r3, #8]
      break;
 8001d5e:	e04e      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f000 f994 	bl	800209c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d82:	609a      	str	r2, [r3, #8]
      break;
 8001d84:	e03b      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6859      	ldr	r1, [r3, #4]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f000 f908 	bl	8001fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2150      	movs	r1, #80	; 0x50
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f961 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8001da4:	e02b      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6859      	ldr	r1, [r3, #4]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	461a      	mov	r2, r3
 8001db4:	f000 f927 	bl	8002006 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2160      	movs	r1, #96	; 0x60
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f951 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8001dc4:	e01b      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f000 f8e8 	bl	8001fa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f941 	bl	8002066 <TIM_ITRx_SetConfig>
      break;
 8001de4:	e00b      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f000 f938 	bl	8002066 <TIM_ITRx_SetConfig>
        break;
 8001df6:	e002      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001df8:	bf00      	nop
 8001dfa:	e000      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001dfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a40      	ldr	r2, [pc, #256]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d00f      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <TIM_Base_SetConfig+0x118>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <TIM_Base_SetConfig+0x11c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <TIM_Base_SetConfig+0x120>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d027      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <TIM_Base_SetConfig+0x118>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d023      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <TIM_Base_SetConfig+0x11c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <TIM_Base_SetConfig+0x120>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d017      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <TIM_Base_SetConfig+0x128>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00f      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <TIM_Base_SetConfig+0x130>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <TIM_Base_SetConfig+0x134>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <TIM_Base_SetConfig+0x138>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d108      	bne.n	8001f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	40001800 	.word	0x40001800
 8001fa0:	40001c00 	.word	0x40001c00
 8001fa4:	40002000 	.word	0x40002000

08001fa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f023 0201 	bic.w	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f023 030a 	bic.w	r3, r3, #10
 8001fe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	621a      	str	r2, [r3, #32]
}
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002006:	b480      	push	{r7}
 8002008:	b087      	sub	sp, #28
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f023 0210 	bic.w	r2, r3, #16
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002030:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	031b      	lsls	r3, r3, #12
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002042:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	621a      	str	r2, [r3, #32]
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	f043 0307 	orr.w	r3, r3, #7
 8002088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	021a      	lsls	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	431a      	orrs	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	609a      	str	r2, [r3, #8]
}
 80020d0:	bf00      	nop
 80020d2:	371c      	adds	r7, #28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e05a      	b.n	80021aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d022      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002140:	d01d      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d018      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00e      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d004      	beq.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10c      	bne.n	8002198 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4313      	orrs	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40010400 	.word	0x40010400
 80021cc:	40014000 	.word	0x40014000
 80021d0:	40001800 	.word	0x40001800

080021d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <__libc_init_array>:
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	4d0d      	ldr	r5, [pc, #52]	; (8002234 <__libc_init_array+0x38>)
 8002200:	4c0d      	ldr	r4, [pc, #52]	; (8002238 <__libc_init_array+0x3c>)
 8002202:	1b64      	subs	r4, r4, r5
 8002204:	10a4      	asrs	r4, r4, #2
 8002206:	2600      	movs	r6, #0
 8002208:	42a6      	cmp	r6, r4
 800220a:	d109      	bne.n	8002220 <__libc_init_array+0x24>
 800220c:	4d0b      	ldr	r5, [pc, #44]	; (800223c <__libc_init_array+0x40>)
 800220e:	4c0c      	ldr	r4, [pc, #48]	; (8002240 <__libc_init_array+0x44>)
 8002210:	f000 f820 	bl	8002254 <_init>
 8002214:	1b64      	subs	r4, r4, r5
 8002216:	10a4      	asrs	r4, r4, #2
 8002218:	2600      	movs	r6, #0
 800221a:	42a6      	cmp	r6, r4
 800221c:	d105      	bne.n	800222a <__libc_init_array+0x2e>
 800221e:	bd70      	pop	{r4, r5, r6, pc}
 8002220:	f855 3b04 	ldr.w	r3, [r5], #4
 8002224:	4798      	blx	r3
 8002226:	3601      	adds	r6, #1
 8002228:	e7ee      	b.n	8002208 <__libc_init_array+0xc>
 800222a:	f855 3b04 	ldr.w	r3, [r5], #4
 800222e:	4798      	blx	r3
 8002230:	3601      	adds	r6, #1
 8002232:	e7f2      	b.n	800221a <__libc_init_array+0x1e>
 8002234:	08002284 	.word	0x08002284
 8002238:	08002284 	.word	0x08002284
 800223c:	08002284 	.word	0x08002284
 8002240:	08002288 	.word	0x08002288

08002244 <memset>:
 8002244:	4402      	add	r2, r0
 8002246:	4603      	mov	r3, r0
 8002248:	4293      	cmp	r3, r2
 800224a:	d100      	bne.n	800224e <memset+0xa>
 800224c:	4770      	bx	lr
 800224e:	f803 1b01 	strb.w	r1, [r3], #1
 8002252:	e7f9      	b.n	8002248 <memset+0x4>

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
